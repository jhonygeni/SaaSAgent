#!/usr/bin/env node

/**
 * üîç Debug Script - An√°lise Detalhada do Problema do Billing Cycle
 * 
 * Este script analisa se h√° inconsist√™ncias entre o que o frontend envia
 * e o que o backend espera receber.
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Iniciando an√°lise detalhada do problema do billing cycle...\n');

// 1. Analisar configura√ß√£o do frontend
console.log('üìã 1. Analisando configura√ß√£o do frontend (PricingPlans.tsx)...');

const frontendPath = path.join(__dirname, 'src/components/PricingPlans.tsx');
const frontendContent = fs.readFileSync(frontendPath, 'utf8');

// Extrair configura√ß√£o de pre√ßos do frontend
const pricingConfigMatch = frontendContent.match(/const pricingConfig = \{[\s\S]*?\};/);
if (pricingConfigMatch) {
  console.log('‚úÖ Configura√ß√£o de pre√ßos encontrada no frontend');
  console.log(pricingConfigMatch[0]);
} else {
  console.log('‚ùå Configura√ß√£o de pre√ßos N√ÉO encontrada no frontend');
}

// Verificar se billingCycle √© enviado
if (frontendContent.includes('billingCycle: billingCycle') || frontendContent.includes('billingCycle,')) {
  console.log('‚úÖ Frontend ENVIA billingCycle para create-checkout');
} else {
  console.log('‚ùå Frontend N√ÉO ENVIA billingCycle para create-checkout');
}

// 2. Analisar backend
console.log('\nüìã 2. Analisando configura√ß√£o do backend (create-checkout)...');

const backendPath = path.join(__dirname, 'supabase/functions/create-checkout/index.ts');
const backendContent = fs.readFileSync(backendPath, 'utf8');

// Verificar se aceita billingCycle
if (backendContent.includes('billingCycle') && backendContent.includes('planId')) {
  console.log('‚úÖ Backend ACEITA billingCycle como par√¢metro');
} else {
  console.log('‚ùå Backend N√ÉO ACEITA billingCycle como par√¢metro');
}

// Verificar estrutura PRICE_IDS
const priceIdsMatch = backendContent.match(/const PRICE_IDS = \{[\s\S]*?\};/);
if (priceIdsMatch) {
  console.log('‚úÖ Estrutura PRICE_IDS encontrada no backend');
  console.log(priceIdsMatch[0]);
} else {
  console.log('‚ùå Estrutura PRICE_IDS N√ÉO encontrada no backend');
}

// 3. Verificar l√≥gica de sele√ß√£o do price ID
console.log('\nüìã 3. Analisando l√≥gica de sele√ß√£o do Price ID...');

// Procurar pela linha que seleciona o price ID
const selectedPriceIdMatch = backendContent.match(/const selectedPriceId = [^;]+;/);
if (selectedPriceIdMatch) {
  console.log('‚úÖ L√≥gica de sele√ß√£o do Price ID encontrada:');
  console.log(selectedPriceIdMatch[0]);
  
  // Verificar se usa billingCycle na sele√ß√£o
  if (selectedPriceIdMatch[0].includes('billingCycle')) {
    console.log('‚úÖ A l√≥gica USA billingCycle para selecionar o Price ID');
  } else {
    console.log('‚ùå A l√≥gica N√ÉO USA billingCycle para selecionar o Price ID');
  }
} else {
  console.log('‚ùå L√≥gica de sele√ß√£o do Price ID N√ÉO encontrada');
}

// 4. Verificar cria√ß√£o da sess√£o Stripe
console.log('\nüìã 4. Analisando cria√ß√£o da sess√£o Stripe...');

const checkoutSessionMatch = backendContent.match(/stripe\.checkout\.sessions\.create\(\{[\s\S]*?\}\);/);
if (checkoutSessionMatch) {
  console.log('‚úÖ Cria√ß√£o da sess√£o Stripe encontrada');
  
  // Verificar se usa selectedPriceId
  if (checkoutSessionMatch[0].includes('selectedPriceId')) {
    console.log('‚úÖ Sess√£o Stripe USA selectedPriceId (correto)');
  } else if (checkoutSessionMatch[0].includes('priceId')) {
    console.log('‚ö†Ô∏è Sess√£o Stripe usa priceId gen√©rico');
  } else {
    console.log('‚ùå Sess√£o Stripe N√ÉO usa price ID din√¢mico');
  }
} else {
  console.log('‚ùå Cria√ß√£o da sess√£o Stripe N√ÉO encontrada');
}

// 5. Simular fluxo completo
console.log('\nüìã 5. Simulando fluxo completo...');

const frontendPricing = {
  starter: {
    monthly: 'price_1RRBDsP1QgGAc8KHzueN2CJL',
    semiannual: 'price_1RUGkFP1QgGAc8KHAXICojLH',
    annual: 'price_1RUGkgP1QgGAc8KHctjcrt7h'
  },
  growth: {
    monthly: 'price_1RRBEZP1QgGAc8KH71uKIH6i',
    semiannual: 'price_1RUAt2P1QgGAc8KHr8K4uqXG',
    annual: 'price_1RUAtVP1QgGAc8KH01aRe0Um'
  }
};

const testCases = [
  { plan: 'starter', cycle: 'monthly' },
  { plan: 'starter', cycle: 'semiannual' },
  { plan: 'starter', cycle: 'annual' },
  { plan: 'growth', cycle: 'monthly' },
  { plan: 'growth', cycle: 'semiannual' },
  { plan: 'growth', cycle: 'annual' }
];

console.log('\nüì§ Simulando dados enviados pelo frontend:');
testCases.forEach(testCase => {
  const { plan, cycle } = testCase;
  const expectedPriceId = frontendPricing[plan][cycle];
  
  const frontendData = {
    planId: plan,
    billingCycle: cycle,
    priceId: expectedPriceId
  };
  
  console.log(`\nüß™ Teste: ${plan} - ${cycle}`);
  console.log(`üì§ Dados enviados: ${JSON.stringify(frontendData, null, 2)}`);
  console.log(`üéØ Price ID esperado: ${expectedPriceId}`);
});

// 6. Verificar problemas potenciais
console.log('\nüìã 6. Verificando problemas potenciais...');

let issuesFound = [];

// Verificar se h√° hardcoding de price IDs
if (backendContent.includes('price_1RRBDsP1QgGAc8KH71uKIH6i') && !backendContent.includes('PRICE_IDS')) {
  issuesFound.push('‚ùå Price IDs podem estar hardcoded no backend');
}

// Verificar se h√° fallback para monthly
if (backendContent.includes("|| 'monthly'") || backendContent.includes('monthly')) {
  issuesFound.push('‚ö†Ô∏è Pode haver fallback for√ßado para "monthly"');
}

// Verificar se h√° uso incorreto de vari√°veis de ambiente
const envVarMatches = backendContent.match(/STRIPE_[A-Z_]+_PRICE_ID/g);
if (envVarMatches) {
  console.log('üìù Vari√°veis de ambiente encontradas:');
  [...new Set(envVarMatches)].forEach(envVar => {
    console.log(`  - ${envVar}`);
  });
}

if (issuesFound.length > 0) {
  console.log('\n‚ö†Ô∏è Problemas identificados:');
  issuesFound.forEach(issue => console.log(issue));
} else {
  console.log('\n‚úÖ Nenhum problema √≥bvio identificado na an√°lise est√°tica');
}

// 7. Recomenda√ß√µes
console.log('\nüìã 7. Recomenda√ß√µes para debug:');
console.log('1. üîç Adicionar logs detalhados no create-checkout para ver:');
console.log('   - Que par√¢metros s√£o recebidos');
console.log('   - Qual price ID √© selecionado');
console.log('   - Se billingCycle est√° sendo usado corretamente');
console.log('');
console.log('2. üß™ Testar com diferentes ciclos e verificar:');
console.log('   - Se selectedPriceId est√° correto');
console.log('   - Se a sess√£o Stripe √© criada com o price ID certo');
console.log('');
console.log('3. üîß Verificar vari√°veis de ambiente no Supabase:');
console.log('   - STRIPE_STARTER_SEMIANNUAL_PRICE_ID');
console.log('   - STRIPE_STARTER_ANNUAL_PRICE_ID');
console.log('   - STRIPE_GROWTH_SEMIANNUAL_PRICE_ID');
console.log('   - STRIPE_GROWTH_ANNUAL_PRICE_ID');
console.log('');
console.log('4. üìä Testar diretamente no Stripe Dashboard:');
console.log('   - Verificar se os price IDs existem');
console.log('   - Confirmar se est√£o configurados corretamente');

console.log('\nüéØ Conclus√£o: O c√≥digo PARECE estar correto. O problema pode estar em:');
console.log('   - Vari√°veis de ambiente n√£o configuradas');
console.log('   - Cache do browser/Supabase');
console.log('   - Logs n√£o sendo exibidos');
console.log('   - Problema na infraestrutura do Stripe');

console.log('\n‚úÖ An√°lise conclu√≠da!');
