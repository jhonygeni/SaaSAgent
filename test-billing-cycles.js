#!/usr/bin/env node

/**
 * üß™ Script de Teste - Sistema de Checkout com M√∫ltiplos Ciclos de Cobran√ßa
 * 
 * Este script valida se:
 * 1. Os Price IDs est√£o consistentes entre frontend e backend
 * 2. A fun√ß√£o create-checkout aceita todos os ciclos de cobran√ßa
 * 3. A fun√ß√£o check-subscription reconhece todas as assinaturas
 */

const fs = require('fs');
const path = require('path');

console.log('üß™ Iniciando testes do sistema de checkout...\n');

// 1. Validar consist√™ncia dos Price IDs
console.log('üìã 1. Validando consist√™ncia dos Price IDs...');

const frontendPricing = {
  starter: {
    monthly: 'price_1RRBDsP1QgGAc8KHzueN2CJL',
    semiannual: 'price_1RUGkFP1QgGAc8KHAXICojLH',
    annual: 'price_1RUGkgP1QgGAc8KHctjcrt7h'
  },
  growth: {
    monthly: 'price_1RRBEZP1QgGAc8KH71uKIH6i',
    semiannual: 'price_1RUAt2P1QgGAc8KHr8K4uqXG',
    annual: 'price_1RUAtVP1QgGAc8KH01aRe0Um'
  }
};

// Ler o arquivo PricingPlans.tsx
const pricingPlansPath = path.join(__dirname, 'src', 'components', 'PricingPlans.tsx');
let frontendConsistent = true;

try {
  const pricingPlansContent = fs.readFileSync(pricingPlansPath, 'utf8');
  
  // Verificar se todos os price IDs est√£o presentes
  Object.entries(frontendPricing).forEach(([plan, cycles]) => {
    Object.entries(cycles).forEach(([cycle, priceId]) => {
      if (pricingPlansContent.includes(priceId)) {
        console.log(`  ‚úÖ ${plan}-${cycle}: ${priceId}`);
      } else {
        console.log(`  ‚ùå ${plan}-${cycle}: ${priceId} N√ÉO ENCONTRADO`);
        frontendConsistent = false;
      }
    });
  });
} catch (error) {
  console.log(`  ‚ùå Erro ao ler PricingPlans.tsx: ${error.message}`);
  frontendConsistent = false;
}

// Ler as fun√ß√µes backend
const checkSubscriptionPath = path.join(__dirname, 'supabase', 'functions', 'check-subscription', 'index.ts');
const createCheckoutPath = path.join(__dirname, 'supabase', 'functions', 'create-checkout', 'index.ts');

let backendConsistent = true;

try {
  const checkSubscriptionContent = fs.readFileSync(checkSubscriptionPath, 'utf8');
  const createCheckoutContent = fs.readFileSync(createCheckoutPath, 'utf8');
  
  console.log('\nüìã 2. Validando fun√ß√µes backend...');
  
  // Verificar se as fun√ß√µes backend reconhecem todos os price IDs
  Object.entries(frontendPricing).forEach(([plan, cycles]) => {
    Object.entries(cycles).forEach(([cycle, priceId]) => {
      const inCheckSubscription = checkSubscriptionContent.includes(priceId);
      const inCreateCheckout = createCheckoutContent.includes(priceId) || 
                              createCheckoutContent.includes(`${cycle}:`);
      
      if (inCheckSubscription) {
        console.log(`  ‚úÖ check-subscription reconhece ${plan}-${cycle}`);
      } else {
        console.log(`  ‚ùå check-subscription N√ÉO reconhece ${plan}-${cycle}`);
        backendConsistent = false;
      }
      
      if (inCreateCheckout) {
        console.log(`  ‚úÖ create-checkout suporta ${plan}-${cycle}`);
      } else {
        console.log(`  ‚ùå create-checkout N√ÉO suporta ${plan}-${cycle}`);
        backendConsistent = false;
      }
    });
  });
} catch (error) {
  console.log(`  ‚ùå Erro ao ler fun√ß√µes backend: ${error.message}`);
  backendConsistent = false;
}

// 3. Verificar estrutura das fun√ß√µes
console.log('\nüìã 3. Verificando estrutura das fun√ß√µes...');

try {
  const createCheckoutContent = fs.readFileSync(createCheckoutPath, 'utf8');
  
  // Verificar se aceita par√¢metro billingCycle
  if (createCheckoutContent.includes('billingCycle')) {
    console.log('  ‚úÖ create-checkout aceita par√¢metro billingCycle');
  } else {
    console.log('  ‚ùå create-checkout N√ÉO aceita par√¢metro billingCycle');
    backendConsistent = false;
  }
  
  // Verificar se valida os ciclos
  if (createCheckoutContent.includes('monthly') && 
      createCheckoutContent.includes('semiannual') && 
      createCheckoutContent.includes('annual')) {
    console.log('  ‚úÖ create-checkout valida todos os ciclos');
  } else {
    console.log('  ‚ùå create-checkout N√ÉO valida todos os ciclos');
    backendConsistent = false;
  }
  
  // Verificar estrutura PRICE_IDS
  if (createCheckoutContent.includes('PRICE_IDS') && 
      createCheckoutContent.includes('starter:') && 
      createCheckoutContent.includes('growth:')) {
    console.log('  ‚úÖ create-checkout tem estrutura PRICE_IDS correta');
  } else {
    console.log('  ‚ùå create-checkout N√ÉO tem estrutura PRICE_IDS correta');
    backendConsistent = false;
  }
} catch (error) {
  console.log(`  ‚ùå Erro ao verificar estrutura: ${error.message}`);
  backendConsistent = false;
}

// 4. Verificar documenta√ß√£o
console.log('\nüìã 4. Verificando documenta√ß√£o...');

const docPath = path.join(__dirname, 'DOCUMENTACAO-PLANOS-PRECOS.md');
let docConsistent = true;

try {
  const docContent = fs.readFileSync(docPath, 'utf8');
  
  // Verificar se todos os price IDs est√£o documentados
  Object.entries(frontendPricing).forEach(([plan, cycles]) => {
    Object.entries(cycles).forEach(([cycle, priceId]) => {
      if (docContent.includes(priceId)) {
        console.log(`  ‚úÖ ${plan}-${cycle} documentado`);
      } else {
        console.log(`  ‚ùå ${plan}-${cycle} N√ÉO documentado`);
        docConsistent = false;
      }
    });
  });
} catch (error) {
  console.log(`  ‚ùå Erro ao ler documenta√ß√£o: ${error.message}`);
  docConsistent = false;
}

// Resultado final
console.log('\nüéØ RESULTADO FINAL:');
console.log('==================');

if (frontendConsistent) {
  console.log('‚úÖ Frontend: Price IDs consistentes');
} else {
  console.log('‚ùå Frontend: Price IDs inconsistentes');
}

if (backendConsistent) {
  console.log('‚úÖ Backend: Fun√ß√µes configuradas corretamente');
} else {
  console.log('‚ùå Backend: Problemas nas fun√ß√µes');
}

if (docConsistent) {
  console.log('‚úÖ Documenta√ß√£o: Atualizada');
} else {
  console.log('‚ùå Documenta√ß√£o: Desatualizada');
}

const allGood = frontendConsistent && backendConsistent && docConsistent;

if (allGood) {
  console.log('\nüéâ SUCESSO: Sistema de checkout est√° funcionando corretamente!');
  console.log('‚úÖ Todos os ciclos de cobran√ßa est√£o configurados');
  console.log('‚úÖ Frontend e backend est√£o sincronizados');
  console.log('‚úÖ Documenta√ß√£o est√° atualizada');
} else {
  console.log('\n‚ö†Ô∏è ATEN√á√ÉO: Foram encontrados problemas que precisam ser corrigidos');
}

// 5. Testes de integra√ß√£o simulados
console.log('\nüìã 5. Simulando testes de integra√ß√£o...');

const testCases = [
  { plan: 'starter', cycle: 'monthly', expectedPrice: 'price_1RRBDsP1QgGAc8KHzueN2CJL' },
  { plan: 'starter', cycle: 'semiannual', expectedPrice: 'price_1RUGkFP1QgGAc8KHAXICojLH' },
  { plan: 'starter', cycle: 'annual', expectedPrice: 'price_1RUGkgP1QgGAc8KHctjcrt7h' },
  { plan: 'growth', cycle: 'monthly', expectedPrice: 'price_1RRBEZP1QgGAc8KH71uKIH6i' },
  { plan: 'growth', cycle: 'semiannual', expectedPrice: 'price_1RUAt2P1QgGAc8KHr8K4uqXG' },
  { plan: 'growth', cycle: 'annual', expectedPrice: 'price_1RUAtVP1QgGAc8KH01aRe0Um' }
];

console.log('\nSimulando chamadas de checkout:');
testCases.forEach(testCase => {
  const { plan, cycle, expectedPrice } = testCase;
  const actualPrice = frontendPricing[plan][cycle];
  
  if (actualPrice === expectedPrice) {
    console.log(`  ‚úÖ ${plan} ${cycle}: Checkout seria criado com ${actualPrice}`);
  } else {
    console.log(`  ‚ùå ${plan} ${cycle}: Esperado ${expectedPrice}, mas usaria ${actualPrice}`);
  }
});

console.log('\nüîß Para testar manualmente:');
console.log('1. Abra http://localhost:8080/planos');
console.log('2. Alterne entre os ciclos de cobran√ßa');
console.log('3. Verifique se os pre√ßos atualizam corretamente');
console.log('4. Teste o checkout para cada combina√ß√£o');
console.log('5. Verifique se o status da assinatura √© detectado corretamente');

process.exit(allGood ? 0 : 1);
