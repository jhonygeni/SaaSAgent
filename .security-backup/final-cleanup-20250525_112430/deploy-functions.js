#!/usr/bin/env node

/**
 * Script para facilitar o deploy das fun√ß√µes Edge do Supabase
 * 
 * Uso:
 *   node deploy-functions.js [all|function-name]
 * 
 * Exemplos:
 *   node deploy-functions.js all        # Deploy de todas as fun√ß√µes
 *   node deploy-functions.js custom-email  # Deploy apenas da fun√ß√£o custom-email
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Diret√≥rio que cont√©m as fun√ß√µes
const FUNCTIONS_DIR = path.join(__dirname, 'functions');

// Fun√ß√£o para fazer deploy de uma fun√ß√£o espec√≠fica
function deployFunction(funcName) {
  console.log(`\nüöÄ Fazendo deploy da fun√ß√£o: ${funcName}`);
  
  try {
    const command = `supabase functions deploy ${funcName} --project-ref hpovwcaskorzzrpphgkc`;
    console.log(`Executando: ${command}`);
    
    execSync(command, { stdio: 'inherit' });
    
    console.log(`‚úÖ Deploy da fun√ß√£o ${funcName} conclu√≠do com sucesso!`);
    return true;
  } catch (error) {
    console.error(`‚ùå Erro ao fazer deploy da fun√ß√£o ${funcName}:`);
    console.error(error.message || error);
    return false;
  }
}

// Fun√ß√£o para listar todas as fun√ß√µes dispon√≠veis
function listFunctions() {
  try {
    return fs.readdirSync(FUNCTIONS_DIR)
      .filter(item => fs.statSync(path.join(FUNCTIONS_DIR, item)).isDirectory());
  } catch (error) {
    console.error('Erro ao listar fun√ß√µes:', error);
    return [];
  }
}

// Fun√ß√£o principal
function main() {
  const args = process.argv.slice(2);
  const target = args[0] || 'all';
  
  console.log('üîß Supabase Functions Deployment Tool');
  console.log('------------------------------------');
  
  // Verificar se o usu√°rio est√° autenticado no Supabase CLI
  try {
    execSync('supabase --version', { stdio: 'pipe' });
  } catch {
    console.error('‚ùå Supabase CLI n√£o est√° instalado ou n√£o est√° no PATH');
    console.error('Instale com: npm install -g supabase');
    process.exit(1);
  }
  
  // Listar todas as fun√ß√µes dispon√≠veis
  const functions = listFunctions();
  
  if (functions.length === 0) {
    console.error('‚ùå Nenhuma fun√ß√£o encontrada no diret√≥rio functions/');
    process.exit(1);
  }
  
  console.log(`üîç Fun√ß√µes dispon√≠veis: ${functions.join(', ')}\n`);
  
  // Fazer deploy com base no argumento fornecido
  if (target === 'all') {
    console.log('üöÄ Fazendo deploy de todas as fun√ß√µes...\n');
    
    let success = 0;
    let failed = 0;
    
    for (const func of functions) {
      const result = deployFunction(func);
      result ? success++ : failed++;
    }
    
    console.log('\nüìä Resumo do Deploy:');
    console.log(`‚úÖ Fun√ß√µes com deploy bem-sucedido: ${success}`);
    console.log(`‚ùå Fun√ß√µes com falha no deploy: ${failed}`);
  } else if (functions.includes(target)) {
    deployFunction(target);
  } else {
    console.error(`‚ùå Fun√ß√£o "${target}" n√£o encontrada.`);
    console.error(`Fun√ß√µes dispon√≠veis: ${functions.join(', ')}`);
    process.exit(1);
  }
}

main();
