#!/usr/bin/env node

/**
 * Teste da Integra√ß√£o de Configura√ß√£o Autom√°tica - Vers√£o Mock
 * 
 * Este script testa a l√≥gica da fun√ß√£o que integra configura√ß√£o autom√°tica
 * de settings na cria√ß√£o de inst√¢ncia, usando mocks para simular a API.
 */

console.log('üß™ TESTE: Integra√ß√£o de Configura√ß√£o Autom√°tica (Mock)');
console.log('=' .repeat(60));

// Simular o comportamento do whatsappService
const mockWhatsappService = {
  /**
   * Mock da fun√ß√£o createInstance com configura√ß√£o autom√°tica integrada
   */
  createInstance: async function(instanceName, userId) {
    console.log(`\nüîß [MOCK] Criando inst√¢ncia: ${instanceName}`);
    
    try {
      // Simular cria√ß√£o da inst√¢ncia
      console.log('   ‚Üí Enviando dados para Evolution API...');
      const instanceData = {
        instanceName,
        integration: "WHATSAPP-BAILEYS",
        token: userId || "default_user",
        qrcode: true,
        webhook: {
          enabled: true,
          url: "https://webhooksaas.geni.chat/webhook/principal",
          events: ["MESSAGES_UPSERT"]
        }
      };
      
      // Simular resposta da API
      await new Promise(resolve => setTimeout(resolve, 500));
      const creationResponse = {
        instance: {
          instanceName: instanceName,
          instanceId: `inst_${Date.now()}`,
          integration: "WHATSAPP-BAILEYS",
          status: "created"
        },
        hash: `hash_${Math.random().toString(36).substr(2, 9)}`,
        settings: {}
      };
      
      console.log('   ‚úÖ Inst√¢ncia criada com sucesso');
      console.log(`      - ID: ${creationResponse.instance.instanceId}`);
      
      // ETAPA ADICIONAL: Configurar automaticamente as configura√ß√µes da inst√¢ncia
      try {
        console.log('   ‚öôÔ∏è  Configurando settings automaticamente...');
        await this.configureInstanceSettings(instanceName);
        console.log('   ‚úÖ Settings configuradas com sucesso');
      } catch (settingsError) {
        console.warn('   ‚ö†Ô∏è  Falha ao configurar settings:', settingsError.message);
        console.log('   ‚ÑπÔ∏è  Inst√¢ncia criada, mas funcionar√° com configura√ß√µes padr√£o');
      }
      
      // Simular salvamento no Supabase
      if (userId) {
        console.log('   üíæ Salvando dados no Supabase...');
        await new Promise(resolve => setTimeout(resolve, 200));
        console.log('   ‚úÖ Dados salvos no Supabase');
      }
      
      return creationResponse;
      
    } catch (error) {
      console.error('   ‚ùå Erro na cria√ß√£o:', error.message);
      throw error;
    }
  },

  /**
   * Mock da fun√ß√£o configureInstanceSettings
   */
  configureInstanceSettings: async function(instanceName) {
    console.log(`      ‚Üí Aplicando configura√ß√µes para ${instanceName}...`);
    
    const settings = {
      rejectCall: true,
      msgCall: "Chamadas n√£o s√£o aceitas neste n√∫mero. Por favor, envie uma mensagem de texto.",
      groupsIgnore: true,
      alwaysOnline: true,
      readMessages: true,
      readStatus: true,
      syncFullHistory: true
    };
    
    // Simular chamada para API
    await new Promise(resolve => setTimeout(resolve, 300));
    
    // Simular poss√≠vel falha (10% de chance)
    if (Math.random() < 0.1) {
      throw new Error('Timeout ao configurar settings');
    }
    
    console.log('      ‚Üí Settings aplicadas:');
    console.log(`         ‚Ä¢ rejectCall: ${settings.rejectCall}`);
    console.log(`         ‚Ä¢ alwaysOnline: ${settings.alwaysOnline}`);
    console.log(`         ‚Ä¢ readMessages: ${settings.readMessages}`);
    console.log(`         ‚Ä¢ groupsIgnore: ${settings.groupsIgnore}`);
    
    return { success: true, settings };
  }
};

/**
 * Executa teste completo da integra√ß√£o
 */
async function runIntegrationTest() {
  console.log('\nüìã Iniciando teste de integra√ß√£o...');
  
  const testCases = [
    { name: 'test_instance_1', userId: 'user_123' },
    { name: 'test_instance_2', userId: 'user_456' },
    { name: 'test_instance_3', userId: null }
  ];
  
  let successCount = 0;
  let failureCount = 0;
  
  for (const testCase of testCases) {
    try {
      console.log(`\nüìù Teste ${testCase.name}:`);
      const result = await mockWhatsappService.createInstance(testCase.name, testCase.userId);
      console.log('   üéâ Teste bem-sucedido!');
      successCount++;
    } catch (error) {
      console.error(`   ‚ùå Teste falhou: ${error.message}`);
      failureCount++;
    }
  }
  
  // Relat√≥rio final
  console.log('\n' + '=' .repeat(60));
  console.log('üìä RELAT√ìRIO FINAL:');
  console.log(`‚úÖ Sucessos: ${successCount}/${testCases.length}`);
  console.log(`‚ùå Falhas: ${failureCount}/${testCases.length}`);
  
  if (failureCount === 0) {
    console.log('\nüéâ TODOS OS TESTES PASSARAM!');
    console.log('‚úÖ A integra√ß√£o de configura√ß√£o autom√°tica est√° funcionando corretamente');
    console.log('‚úÖ Settings s√£o aplicadas automaticamente ap√≥s cria√ß√£o da inst√¢ncia');
    console.log('‚úÖ Erros de configura√ß√£o n√£o impedem a cria√ß√£o da inst√¢ncia');
  } else {
    console.log('\n‚ö†Ô∏è  Alguns testes falharam, revisar implementa√ß√£o');
  }
}

/**
 * Testa cen√°rio de falha na configura√ß√£o
 */
async function testConfigurationFailureScenario() {
  console.log('\nüîç Testando cen√°rio de falha na configura√ß√£o...');
  
  // Mock tempor√°rio que sempre falha na configura√ß√£o
  const originalConfig = mockWhatsappService.configureInstanceSettings;
  mockWhatsappService.configureInstanceSettings = async function(instanceName) {
    await new Promise(resolve => setTimeout(resolve, 100));
    throw new Error('Simula√ß√£o de falha na API de configura√ß√£o');
  };
  
  try {
    const result = await mockWhatsappService.createInstance('test_failure_scenario', 'user_test');
    console.log('‚úÖ Inst√¢ncia criada mesmo com falha na configura√ß√£o');
    console.log('‚úÖ Comportamento correto: n√£o falha a cria√ß√£o por causa dos settings');
  } catch (error) {
    console.error('‚ùå Comportamento incorreto: cria√ß√£o falhou por causa dos settings');
  } finally {
    // Restaurar fun√ß√£o original
    mockWhatsappService.configureInstanceSettings = originalConfig;
  }
}

// Executar todos os testes
async function runAllTests() {
  await runIntegrationTest();
  await testConfigurationFailureScenario();
  
  console.log('\n‚ú® Testes conclu√≠dos!');
  console.log('\nüìù Implementa√ß√£o validada:');
  console.log('   ‚Ä¢ createInstance() chama automaticamente configureInstanceSettings()');
  console.log('   ‚Ä¢ Falhas na configura√ß√£o n√£o impedem cria√ß√£o da inst√¢ncia');
  console.log('   ‚Ä¢ Logs detalhados para monitoramento');
  console.log('   ‚Ä¢ Salvamento no Supabase mantido');
}

runAllTests().catch(error => {
  console.error('‚ùå Erro fatal nos testes:', error);
  process.exit(1);
});
