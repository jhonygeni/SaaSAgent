#!/usr/bin/env node

/**
 * VERIFICA√á√ÉO R√ÅPIDA DE STATUS - ConversaAI Brasil
 * Vers√£o simplificada para diagn√≥stico r√°pido
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

config();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Vari√°veis de ambiente n√£o encontradas');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üîç VERIFICA√á√ÉO R√ÅPIDA DE STATUS');
console.log('===============================');
console.log(`üìÖ ${new Date().toLocaleString('pt-BR')}\n`);

async function quickCheck() {
    const results = [];
    
    // 1. Verificar se consegue conectar
    console.log('üîå Testando conectividade...');
    try {
        const { data, error } = await supabase.from('subscription_plans').select('count').limit(1);
        if (error) {
            results.push('‚ùå Conex√£o: Erro ao conectar com Supabase');
        } else {
            results.push('‚úÖ Conex√£o: Supabase acess√≠vel');
        }
    } catch (err) {
        results.push(`‚ùå Conex√£o: ${err.message}`);
    }

    // 2. Verificar planos
    console.log('üí≥ Verificando planos...');
    try {
        const { data: plans, error } = await supabase.from('subscription_plans').select('name');
        if (error) {
            results.push(`‚ùå Planos: ${error.message}`);
        } else {
            const freeCount = plans.filter(p => p.name === 'Free').length;
            if (freeCount === 1) {
                results.push('‚úÖ Planos: Plano Free √∫nico presente');
            } else if (freeCount > 1) {
                results.push(`‚ö†Ô∏è  Planos: ${freeCount} planos Free (duplicatas)`);
            } else {
                results.push('‚ùå Planos: Plano Free n√£o encontrado');
            }
            results.push(`üìä Total de planos: ${plans.length}`);
        }
    } catch (err) {
        results.push(`‚ùå Planos: ${err.message}`);
    }

    // 3. Verificar usu√°rios e perfis
    console.log('üë• Verificando usu√°rios...');
    try {
        const { data: profiles, error } = await supabase.from('profiles').select('id');
        if (error) {
            results.push(`‚ùå Perfis: ${error.message}`);
        } else {
            results.push(`‚úÖ Perfis: ${profiles.length} perfis ativos`);
        }

        const { data: subscriptions, error: subError } = await supabase.from('subscriptions').select('user_id');
        if (subError) {
            results.push(`‚ùå Assinaturas: ${subError.message}`);
        } else {
            results.push(`‚úÖ Assinaturas: ${subscriptions.length} assinaturas ativas`);
        }
    } catch (err) {
        results.push(`‚ùå Usu√°rios: ${err.message}`);
    }

    // 4. Verificar estrutura b√°sica
    console.log('üèóÔ∏è  Verificando estrutura...');
    const tables = ['messages', 'contacts', 'whatsapp_instances', 'agents'];
    for (const table of tables) {
        try {
            const { data, error } = await supabase.from(table).select('*').limit(1);
            if (error) {
                results.push(`‚ùå ${table}: ${error.message}`);
            } else {
                results.push(`‚úÖ ${table}: Tabela acess√≠vel`);
            }
        } catch (err) {
            results.push(`‚ùå ${table}: ${err.message}`);
        }
    }

    // Imprimir resultados
    console.log('\nüìã RESULTADOS:');
    console.log('==============');
    results.forEach(result => console.log(result));

    // Determinar status geral
    const errors = results.filter(r => r.startsWith('‚ùå')).length;
    const warnings = results.filter(r => r.startsWith('‚ö†Ô∏è')).length;
    const success = results.filter(r => r.startsWith('‚úÖ')).length;

    console.log('\nüéØ STATUS GERAL:');
    console.log(`   ‚úÖ Sucessos: ${success}`);
    console.log(`   ‚ö†Ô∏è  Aten√ß√£o: ${warnings}`);
    console.log(`   ‚ùå Erros: ${errors}`);

    if (errors === 0 && warnings === 0) {
        console.log('\nüéâ SISTEMA PERFEITO!');
        console.log('   Todas as verifica√ß√µes passaram com sucesso.');
    } else if (errors === 0) {
        console.log('\nüëç SISTEMA FUNCIONAL!');
        console.log('   Sistema operacional com algumas melhorias recomendadas.');
    } else {
        console.log('\n‚ö†Ô∏è  SISTEMA COM PROBLEMAS!');
        console.log('   Alguns erros precisam ser corrigidos.');
    }

    console.log('\nüìù PR√ìXIMAS A√á√ïES:');
    console.log('1. Configurar Auth Hooks no Dashboard Supabase');
    console.log('2. Testar cria√ß√£o de usu√°rio end-to-end');
    console.log('3. Verificar envio de emails autom√°ticos');
    console.log('\nüìñ Documenta√ß√£o: CONFIGURACAO-AUTH-HOOKS-URGENTE.md');
}

quickCheck().catch(console.error);
