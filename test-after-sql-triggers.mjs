#!/usr/bin/env node

// Teste para executar AP√ìS aplicar as SQL triggers
const supabaseUrl = 'https://hpovwcaskorzzrpphgkc.supabase.co';
const anonKey = 'process.env.SUPABASE_ANON_KEY || ""';
const serviceKey = 'process.env.SUPABASE_ANON_KEY || ""';

async function testAfterTriggers() {
  console.log('üß™ TESTE AP√ìS APLICAR SQL TRIGGERS');
  console.log('='.repeat(50));

  // 1. Verificar se plano Free existe
  console.log('\nüí∞ 1. Verificando plano Free...');
  try {
    const response = await fetch(`${supabaseUrl}/rest/v1/subscription_plans?name=eq.Free`, {
      headers: {
        'Authorization': `Bearer ${serviceKey}`,
        'apikey': serviceKey
      }
    });
    const plans = await response.json();
    
    if (plans.length > 0) {
      console.log('‚úÖ Plano Free encontrado:', plans[0].name);
    } else {
      console.log('‚ùå Plano Free n√£o encontrado');
      return;
    }
  } catch (error) {
    console.log('‚ùå Erro ao verificar plano:', error.message);
    return;
  }

  // 2. Testar cadastro de usu√°rio
  console.log('\nüë§ 2. Testando cadastro de usu√°rio...');
  const testEmail = `teste-triggers-${Date.now()}@conversaai.com.br`;
  
  try {
    const signupResponse = await fetch(`${supabaseUrl}/auth/v1/signup`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'apikey': anonKey
      },
      body: JSON.stringify({
        email: testEmail,
        password: 'senha123456',
        data: {
          name: 'Teste Triggers SQL'
        }
      })
    });

    if (signupResponse.ok) {
      const result = await signupResponse.json();
      console.log('‚úÖ Usu√°rio criado com sucesso!');
      console.log('üìß Email:', testEmail);
      console.log('üÜî User ID:', result.user?.id);

      // 3. Verificar se perfil foi criado automaticamente
      console.log('\nüë• 3. Verificando se perfil foi criado...');
      setTimeout(async () => {
        try {
          const profileResponse = await fetch(`${supabaseUrl}/rest/v1/profiles?id=eq.${result.user.id}`, {
            headers: {
              'Authorization': `Bearer ${serviceKey}`,
              'apikey': serviceKey
            }
          });
          const profiles = await profileResponse.json();
          
          if (profiles.length > 0) {
            console.log('‚úÖ Perfil criado automaticamente via trigger!');
            console.log('üìù Nome:', profiles[0].full_name);
          } else {
            console.log('‚ùå Perfil N√ÉO foi criado automaticamente');
          }
        } catch (error) {
          console.log('‚ùå Erro ao verificar perfil:', error.message);
        }

        // 4. Verificar se assinatura foi criada
        console.log('\nüí≥ 4. Verificando se assinatura foi criada...');
        try {
          const subResponse = await fetch(`${supabaseUrl}/rest/v1/subscriptions?user_id=eq.${result.user.id}&select=*,subscription_plans(name)`, {
            headers: {
              'Authorization': `Bearer ${serviceKey}`,
              'apikey': serviceKey
            }
          });
          const subscriptions = await subResponse.json();
          
          if (subscriptions.length > 0) {
            console.log('‚úÖ Assinatura criada automaticamente via trigger!');
            console.log('üì¶ Plano:', subscriptions[0].subscription_plans?.name);
            console.log('üìÖ Status:', subscriptions[0].status);
          } else {
            console.log('‚ùå Assinatura N√ÉO foi criada automaticamente');
          }
        } catch (error) {
          console.log('‚ùå Erro ao verificar assinatura:', error.message);
        }

        console.log('\nüéØ RESULTADO:');
        if (profiles.length > 0 && subscriptions.length > 0) {
          console.log('‚úÖ TRIGGERS FUNCIONANDO PERFEITAMENTE!');
          console.log('üìß Pr√≥ximo passo: Configurar Auth Hooks para emails');
        } else {
          console.log('‚ùå Triggers n√£o est√£o funcionando corretamente');
          console.log('üîß Verifique se executou o SQL triggers no console');
        }
      }, 2000);

    } else {
      const errorResult = await signupResponse.json();
      console.log('‚ùå Erro no cadastro:', errorResult);
    }
  } catch (error) {
    console.log('‚ùå Erro no teste:', error.message);
  }
}

// Verificar se fetch est√° dispon√≠vel
if (typeof fetch === 'undefined') {
  console.log('‚ùå fetch n√£o est√° dispon√≠vel. Instale node-fetch ou use Node.js 18+');
  process.exit(1);
}

testAfterTriggers().catch(console.error);
