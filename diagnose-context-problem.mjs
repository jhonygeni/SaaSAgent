#!/usr/bin/env node
/**
 * Diagn√≥stico espec√≠fico do problema de sincroniza√ß√£o do UserContext
 */

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Carregar vari√°veis de ambiente
dotenv.config({ path: path.join(__dirname, '.env.local') });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
    console.error('‚ùå Vari√°veis de ambiente n√£o encontradas');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

console.log('üîç Diagn√≥stico do Problema de Contexto React');
console.log('='.repeat(50));

async function diagnosticarContexto() {
    try {
        console.log('\n1. üì° Verificando sess√£o atual no Supabase...');
        
        const { data: { session }, error: sessionError } = await supabase.auth.getSession();
        
        if (sessionError) {
            console.log('‚ùå Erro ao obter sess√£o:', sessionError);
            return;
        }
        
        if (!session) {
            console.log('‚ùå Nenhuma sess√£o ativa encontrada');
            console.log('üí° O usu√°rio precisa fazer login primeiro');
            return;
        }
        
        console.log('‚úÖ Sess√£o ativa encontrada!');
        console.log(`   üë§ User ID: ${session.user.id}`);
        console.log(`   üìß Email: ${session.user.email}`);
        console.log(`   üîë Token v√°lido: ${!!session.access_token}`);
        console.log(`   ‚è∞ Expira em: ${new Date(session.expires_at * 1000).toLocaleString()}`);
        
        console.log('\n2. üîÑ Testando Auth State Change simulation...');
        
        // Simular o que o UserContext deveria fazer
        const user = session.user;
        
        console.log('\n3. üß™ Dados que o UserContext deveria processar:');
        const mockUserData = {
            id: user.id,
            email: user.email || '',
            name: user.user_metadata?.name || user.email || '',
            plan: 'free',
            messageCount: 0,
            messageLimit: 50,
            agents: [],
        };
        
        console.log('   UserContext deveria criar:', JSON.stringify(mockUserData, null, 2));
        
        console.log('\n4. üîç Verificando edge function check-subscription...');
        
        try {
            const { data: subscriptionData, error: subError } = await supabase.functions.invoke('check-subscription');
            
            if (subError) {
                console.log('‚ö†Ô∏è  Erro na edge function:', subError);
                console.log('üí° UserContext pode estar falhando aqui');
            } else {
                console.log('‚úÖ Edge function respondeu:');
                console.log('   ', JSON.stringify(subscriptionData, null, 2));
            }
        } catch (invokeError) {
            console.log('‚ùå Falha ao invocar edge function:', invokeError.message);
            console.log('üí° Este pode ser o motivo do UserContext n√£o sincronizar');
        }
        
        console.log('\n5. üîÑ Verificando listener de Auth State Change...');
        
        let listenerTriggered = false;
        
        const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
            console.log(`üîî Auth event detectado: ${event}`);
            console.log(`   Session: ${session ? 'presente' : 'ausente'}`);
            listenerTriggered = true;
        });
        
        // Aguardar um momento para ver se o listener √© acionado
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        if (!listenerTriggered) {
            console.log('‚ö†Ô∏è  Listener de Auth State Change n√£o foi acionado');
            console.log('üí° Poss√≠vel problema: o UserContext pode n√£o estar detectando mudan√ßas');
        }
        
        subscription.unsubscribe();
        
        console.log('\n6. üîß Poss√≠veis causas do problema:');
        console.log('   a) UserContext n√£o est√° sendo reinicializado corretamente');
        console.log('   b) Hook useEffect com depend√™ncias incorretas');
        console.log('   c) Race condition entre auth e context');
        console.log('   d) Estado sendo resetado por outro componente');
        console.log('   e) Problema com ref initializationAttempted');
        
        console.log('\n7. üöÄ Recomenda√ß√µes de corre√ß√£o:');
        console.log('   1. For√ßar reinicializa√ß√£o do UserContext');
        console.log('   2. Remover ref initializationAttempted que pode estar bloqueando');
        console.log('   3. Simplificar o useEffect de inicializa√ß√£o');
        console.log('   4. Adicionar logs mais detalhados');
        
    } catch (error) {
        console.error('‚ùå Erro no diagn√≥stico:', error);
    }
}

diagnosticarContexto().then(() => {
    console.log('\n‚úÖ Diagn√≥stico conclu√≠do!');
    process.exit(0);
});
