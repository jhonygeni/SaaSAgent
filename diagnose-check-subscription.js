#!/usr/bin/env node

// Script de diagn√≥stico para testar a fun√ß√£o check-subscription
// Ele far√° uma chamada direta √† fun√ß√£o e medir√° o tempo de resposta

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configura√ß√µes do projeto Supabase
const SUPABASE_URL = 'https://hpovwcaskorzzrpphgkc.supabase.co';
const SUPABASE_ANON_KEY = 'process.env.SUPABASE_ANON_KEY || ""';

// Criar cliente Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

const testCheckSubscriptionFunction = async () => {
  console.log('üîç Iniciando diagn√≥stico da fun√ß√£o check-subscription');
  
  try {
    // Primeiro, vamos verificar se temos uma sess√£o 
    console.log('üë§ Verificando sess√£o atual...');
    const { data: sessionData } = await supabase.auth.getSession();
    
    if (!sessionData?.session) {
      console.log('‚ùå Sem sess√£o ativa. Fazendo login para teste...');
      
      // Se n√£o tiver sess√£o, solicitar login para teste
      const email = process.argv[2];
      const password = process.argv[3];
      
      if (!email || !password) {
        console.error('‚ö†Ô∏è Por favor, forne√ßa email e senha como par√¢metros:');
        console.error('node diagnose-check-subscription.js seu-email@exemplo.com sua-senha');
        process.exit(1);
      }
      
      const { error: signInError } = await supabase.auth.signInWithPassword({
        email,
        password
      });
      
      if (signInError) {
        console.error('‚ùå Erro ao fazer login:', signInError.message);
        process.exit(1);
      }
      
      console.log('‚úÖ Login realizado com sucesso');
    } else {
      console.log('‚úÖ Sess√£o encontrada');
    }
    
    // Agora vamos chamar a fun√ß√£o check-subscription com timing
    console.log('\n‚è±Ô∏è Chamando fun√ß√£o check-subscription...');
    const startTime = Date.now();
    
    // Definir um timeout para a chamada
    const timeoutPromise = new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Timeout - A fun√ß√£o levou mais de 30 segundos para responder')), 30000)
    );
    
    // Chamar a fun√ß√£o com race para implementar timeout
    const result = await Promise.race([
      supabase.functions.invoke('check-subscription'),
      timeoutPromise
    ]);
    
    const endTime = Date.now();
    const executionTime = (endTime - startTime) / 1000;
    
    console.log(`‚úÖ Fun√ß√£o respondeu em ${executionTime.toFixed(2)} segundos`);
    
    if (result.error) {
      console.error('‚ùå Erro na resposta da fun√ß√£o:', result.error);
    } else {
      console.log('üìä Resposta da fun√ß√£o:', result.data);
    }
    
  } catch (error) {
    if (error.message.includes('Timeout')) {
      console.error('‚è∞ TIMEOUT: A fun√ß√£o est√° demorando muito para responder.');
      console.log('\nPoss√≠veis causas:');
      console.log('1. Problemas de conectividade com a API do Stripe');
      console.log('2. Vari√°vel STRIPE_SECRET_KEY n√£o configurada ou inv√°lida');
      console.log('3. Alto volume de requisi√ß√µes ou limites de taxa excedidos');
      console.log('4. Problemas de autentica√ß√£o com o token do usu√°rio');
      console.log('\nRecomenda√ß√µes:');
      console.log('- Verificar os logs da fun√ß√£o no console do Supabase');
      console.log('- Verificar as vari√°veis de ambiente na fun√ß√£o Edge');
      console.log('- Implementar timeout no c√≥digo do UserContext para evitar bloqueio da UI');
    } else {
      console.error('‚ùå Erro inesperado:', error);
    }
  }
  
  process.exit(0);
};

// Executar diagn√≥stico
testCheckSubscriptionFunction();

// Para executar: node diagnose-check-subscription.js email senha
