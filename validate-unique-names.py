#!/usr/bin/env python3
"""
Script de valida√ß√£o para verificar se a implementa√ß√£o de nomes √∫nicos est√° correta
"""

import os
import re
import json

def check_file_exists(file_path, description):
    """Verifica se um arquivo existe"""
    if os.path.exists(file_path):
        print(f"‚úÖ {description}: {file_path}")
        return True
    else:
        print(f"‚ùå {description}: {file_path} (ARQUIVO N√ÉO ENCONTRADO)")
        return False

def check_import_in_file(file_path, import_pattern, description):
    """Verifica se um import espec√≠fico existe no arquivo"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            if import_pattern in content:
                print(f"‚úÖ {description}")
                return True
            else:
                print(f"‚ùå {description} (IMPORT N√ÉO ENCONTRADO)")
                return False
    except Exception as e:
        print(f"‚ùå {description} (ERRO AO LER ARQUIVO: {e})")
        return False

def check_function_usage(file_path, function_name, description):
    """Verifica se uma fun√ß√£o √© usada no arquivo"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            if function_name in content:
                print(f"‚úÖ {description}")
                return True
            else:
                print(f"‚ùå {description} (FUN√á√ÉO N√ÉO ENCONTRADA)")
                return False
    except Exception as e:
        print(f"‚ùå {description} (ERRO AO LER ARQUIVO: {e})")
        return False

def validate_typescript_syntax(file_path, description):
    """Valida√ß√£o b√°sica de sintaxe TypeScript"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
            # Verifica se h√° exports v√°lidos
            if 'export' in content:
                print(f"‚úÖ {description} - Exports encontrados")
            else:
                print(f"‚ö†Ô∏è {description} - Nenhum export encontrado")
            
            # Verifica se h√° fun√ß√µes
            if 'function' in content or '=>' in content:
                print(f"‚úÖ {description} - Fun√ß√µes encontradas")
            else:
                print(f"‚ùå {description} - Nenhuma fun√ß√£o encontrada")
            
            return True
    except Exception as e:
        print(f"‚ùå {description} (ERRO: {e})")
        return False

def main():
    print("üîç VALIDA√á√ÉO DA IMPLEMENTA√á√ÉO DE NOMES √öNICOS")
    print("=" * 50)
    
    base_path = "/Users/jhonymonhol/Desktop/conversa-ai-brasil"
    
    # Lista de arquivos para verificar
    files_to_check = [
        ("src/utils/uniqueNameGenerator.ts", "Gerador de nomes √∫nicos"),
        ("src/services/agentService.ts", "Servi√ßo de agentes"),
        ("src/context/AgentContext.tsx", "Contexto de agentes"),
        ("src/utils/instanceNameValidator.js", "Validador de nomes"),
        ("src/tests/uniqueNameGenerator.test.ts", "Testes unit√°rios"),
        ("test-unique-names.mjs", "Script de teste"),
    ]
    
    print("\nüìÅ VERIFICANDO ARQUIVOS:")
    print("-" * 30)
    
    all_files_exist = True
    for file_path, description in files_to_check:
        full_path = os.path.join(base_path, file_path)
        if not check_file_exists(full_path, description):
            all_files_exist = False
    
    # Verificando imports espec√≠ficos
    print("\nüì¶ VERIFICANDO IMPORTS:")
    print("-" * 30)
    
    imports_to_check = [
        ("src/services/agentService.ts", 'import { getUniqueInstanceName }', "Import no agentService"),
        ("src/context/AgentContext.tsx", 'import { getUniqueInstanceName }', "Import no AgentContext"),
    ]
    
    all_imports_ok = True
    for file_path, import_pattern, description in imports_to_check:
        full_path = os.path.join(base_path, file_path)
        if not check_import_in_file(full_path, import_pattern, description):
            all_imports_ok = False
    
    # Verificando uso das fun√ß√µes
    print("\nüîß VERIFICANDO USO DAS FUN√á√ïES:")
    print("-" * 30)
    
    functions_to_check = [
        ("src/services/agentService.ts", "getUniqueInstanceName(agent.nome, user.id)", "Uso no agentService"),
        ("src/context/AgentContext.tsx", "getUniqueInstanceName(agent.nome, user?.id)", "Uso no AgentContext"),
    ]
    
    all_functions_ok = True
    for file_path, function_pattern, description in functions_to_check:
        full_path = os.path.join(base_path, file_path)
        if not check_function_usage(full_path, "getUniqueInstanceName", description):
            all_functions_ok = False
    
    # Valida√ß√£o de sintaxe dos arquivos principais
    print("\nüìù VALIDANDO SINTAXE:")
    print("-" * 30)
    
    syntax_files = [
        ("src/utils/uniqueNameGenerator.ts", "uniqueNameGenerator.ts"),
        ("src/tests/uniqueNameGenerator.test.ts", "Tests"),
    ]
    
    all_syntax_ok = True
    for file_path, description in syntax_files:
        full_path = os.path.join(base_path, file_path)
        if os.path.exists(full_path):
            if not validate_typescript_syntax(full_path, description):
                all_syntax_ok = False
    
    # Verificando package.json
    print("\nüìã VERIFICANDO DEPEND√äNCIAS:")
    print("-" * 30)
    
    package_json_path = os.path.join(base_path, "package.json")
    if os.path.exists(package_json_path):
        try:
            with open(package_json_path, 'r', encoding='utf-8') as f:
                package_data = json.load(f)
                
                # Verifica nanoid
                if 'nanoid' in package_data.get('dependencies', {}):
                    print("‚úÖ Depend√™ncia nanoid encontrada")
                else:
                    print("‚ùå Depend√™ncia nanoid N√ÉO encontrada")
                
                # Verifica scripts de teste
                scripts = package_data.get('scripts', {})
                if 'test' in scripts:
                    print("‚úÖ Script de teste encontrado")
                else:
                    print("‚ö†Ô∏è Script de teste n√£o encontrado")
                    
        except Exception as e:
            print(f"‚ùå Erro ao ler package.json: {e}")
    
    # Resultado final
    print("\n" + "=" * 50)
    print("üìä RESULTADO DA VALIDA√á√ÉO:")
    print("=" * 50)
    
    if all_files_exist and all_imports_ok and all_functions_ok and all_syntax_ok:
        print("üéâ ‚úÖ IMPLEMENTA√á√ÉO VALIDADA COM SUCESSO!")
        print("\n‚úÖ Todos os arquivos est√£o presentes")
        print("‚úÖ Todos os imports est√£o corretos") 
        print("‚úÖ Todas as fun√ß√µes est√£o sendo usadas")
        print("‚úÖ Sintaxe validada")
        print("\nüöÄ O sistema de nomes √∫nicos est√° pronto para uso!")
        
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Execute os testes: npm run test")
        print("2. Teste a cria√ß√£o de agentes na interface")
        print("3. Monitore os logs para verificar a gera√ß√£o de nomes √∫nicos")
        
    else:
        print("‚ö†Ô∏è ‚ùå PROBLEMAS ENCONTRADOS NA IMPLEMENTA√á√ÉO")
        print("\nRevise os itens marcados com ‚ùå acima")
        
    return all_files_exist and all_imports_ok and all_functions_ok and all_syntax_ok

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
