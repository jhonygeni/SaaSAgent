/**
 * Evolution API v2 - Tester de Conex√£o com apikey
 * Este script verifica a conex√£o com a Evolution API v2 usando header apikey
 * 
 * Executar:
 *   node evolution-api-test.js
 */

// Importar m√≥dulos necess√°rios para Node.js
const fetchModule = () => import('node-fetch').then(({ default: fetch }) => fetch);

// Constantes
const API_URL = process.env.EVOLUTION_API_URL || 'https://cloudsaas.geni.chat';
const API_KEY = process.env.EVOLUTION_API_KEY || 'a01d49df66f0b9d8f368d3788a32aea8';

/**
 * Fun√ß√£o principal para testar a conex√£o
 */
async function testEvolutionAPI() {
  const fetch = await fetchModule();
  console.log('üîç Testando conex√£o com Evolution API v2');
  console.log(`üåê URL: ${API_URL}`);
  console.log(`üîë API Key: ${API_KEY.substring(0, 4)}...${API_KEY.substring(API_KEY.length - 4)}`);
  
  try {
    // Testando a conex√£o com header apikey (CORRETO)
    console.log('\nüîÑ Testando cabe√ßalho apikey (formato correto):');
    const responseApiKey = await fetch(`${API_URL}/instance/fetchInstances`, {
      headers: {
        'apikey': API_KEY,
        'Accept': 'application/json'
      }
    });
    
    console.log(`üìä Status: ${responseApiKey.status} ${responseApiKey.statusText}`);
    
    if (responseApiKey.ok) {
      const data = await responseApiKey.json();
      console.log('‚úÖ Sucesso! Conex√£o com apikey funcionando corretamente.');
      console.log(`üì± Inst√¢ncias encontradas: ${Array.isArray(data) ? data.length : 'Formato de resposta n√£o √© um array'}`);
      
      if (Array.isArray(data) && data.length > 0) {
        console.log('\nüìã Primeiras inst√¢ncias:');
        data.slice(0, 3).forEach((instance, index) => {
          console.log(`   ${index + 1}. ${instance?.instance?.instanceName || 'Nome n√£o dispon√≠vel'} - Status: ${instance?.instance?.status || 'desconhecido'}`);
        });
      }
    } else {
      console.log('‚ùå Falha na conex√£o com header apikey.');
      console.log(await responseApiKey.text());
    }
    
    // Teste de compara√ß√£o com formato Authorization: Bearer (INCORRETO)
    console.log('\nüîÑ Testando cabe√ßalho Authorization: Bearer (formato INCORRETO):');
    const responseBearerAuth = await fetch(`${API_URL}/instance/fetchInstances`, {
      headers: {
        'Authorization': `Bearer ${API_KEY}`,
        'Accept': 'application/json'
      }
    });
    
    console.log(`üìä Status: ${responseBearerAuth.status} ${responseBearerAuth.statusText}`);
    
    if (responseBearerAuth.ok) {
      console.log('‚ö†Ô∏è Inesperado! Authorization: Bearer tamb√©m funciona (n√£o deveria).');
    } else {
      console.log('‚úÖ Esperado! Authorization: Bearer falha com erro 401/403.');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao testar conex√£o:', error.message);
  }
}

// Executar o teste
testEvolutionAPI().catch(console.error);
