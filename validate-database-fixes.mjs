#!/usr/bin/env node

/**
 * SCRIPT DE VALIDA√á√ÉO P√ìS-CORRE√á√ïES
 * ConversaAI Brasil - Verificar se todas as corre√ß√µes foram aplicadas
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://hpovwcaskorzzrpphgkc.supabase.co';
const supabaseKey = process.env.SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imhwb3Z3Y2Fza29ycnpycnBoZ2tjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzE1OTc1NTgsImV4cCI6MjA0NzE3MzU1OH0.BrsKaJRxM4ACmPbJQ-Vg8NKKBs-_WTLlmczU5H8xd5o";

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üîç VALIDA√á√ÉO P√ìS-CORRE√á√ïES DO BANCO DE DADOS');
console.log('='.repeat(60));

const validationResults = {
  tables: {},
  trigger: false,
  freePlan: false,
  indexes: {},
  policies: {},
  integrity: {},
  performance: {}
};

/**
 * 1. VERIFICAR ESTRUTURA DE TABELAS
 */
async function validateTableStructure() {
  console.log('\nüìã 1. VERIFICANDO ESTRUTURA DE TABELAS...');
  
  const requiredTables = [
    'profiles', 'subscription_plans', 'subscriptions',
    'whatsapp_instances', 'agents', 'messages', 'contacts',
    'payments', 'usage_stats', 'event_logs'
  ];
  
  for (const table of requiredTables) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('id')
        .limit(1);
      
      validationResults.tables[table] = !error;
      const status = !error ? '‚úÖ' : '‚ùå';
      console.log(`  ${status} ${table}: ${!error ? 'OK' : error.message}`);
      
    } catch (err) {
      validationResults.tables[table] = false;
      console.log(`  ‚ùå ${table}: ${err.message}`);
    }
  }
}

/**
 * 2. VERIFICAR PLANO GRATUITO
 */
async function validateFreePlan() {
  console.log('\nüí∞ 2. VERIFICANDO PLANO GRATUITO...');
  
  try {
    const { data, error } = await supabase
      .from('subscription_plans')
      .select('id, name, price, is_active')
      .eq('name', 'Free')
      .eq('is_active', true);
    
    if (!error && data && data.length > 0) {
      validationResults.freePlan = true;
      console.log('  ‚úÖ Plano Free encontrado:', data[0]);
    } else {
      validationResults.freePlan = false;
      console.log('  ‚ùå Plano Free n√£o encontrado ou inativo');
    }
    
  } catch (err) {
    validationResults.freePlan = false;
    console.log('  ‚ùå Erro ao verificar plano Free:', err.message);
  }
}

/**
 * 3. VERIFICAR INTEGRIDADE DOS DADOS
 */
async function validateDataIntegrity() {
  console.log('\nüîó 3. VERIFICANDO INTEGRIDADE DOS DADOS...');
  
  try {
    // Usu√°rios sem perfil
    const { data: usersWithoutProfile, error: profileError } = await supabase
      .rpc('check_users_without_profile');
    
    if (!profileError) {
      const orphanCount = usersWithoutProfile || 0;
      validationResults.integrity.orphanProfiles = orphanCount === 0;
      console.log(`  ${orphanCount === 0 ? '‚úÖ' : '‚ö†Ô∏è'} Usu√°rios sem perfil: ${orphanCount}`);
    }
    
    // Usu√°rios sem assinatura
    const { data: usersWithoutSubscription, error: subscriptionError } = await supabase
      .rpc('check_users_without_subscription');
    
    if (!subscriptionError) {
      const orphanCount = usersWithoutSubscription || 0;
      validationResults.integrity.orphanSubscriptions = orphanCount === 0;
      console.log(`  ${orphanCount === 0 ? '‚úÖ' : '‚ö†Ô∏è'} Usu√°rios sem assinatura: ${orphanCount}`);
    }
    
  } catch (err) {
    console.log('  ‚ö†Ô∏è Verifica√ß√£o via RPC indispon√≠vel, usando m√©todo alternativo...');
    
    // M√©todo alternativo: contagem b√°sica
    try {
      const { count: profileCount } = await supabase
        .from('profiles')
        .select('*', { count: 'exact', head: true });
      
      const { count: subscriptionCount } = await supabase
        .from('subscriptions')
        .select('*', { count: 'exact', head: true });
      
      console.log(`  üìä Perfis cadastrados: ${profileCount || 'N/A'}`);
      console.log(`  üìä Assinaturas ativas: ${subscriptionCount || 'N/A'}`);
      
    } catch (countErr) {
      console.log('  ‚ö†Ô∏è N√£o foi poss√≠vel verificar contagens');
    }
  }
}

/**
 * 4. TESTAR PERFORMANCE B√ÅSICA
 */
async function validatePerformance() {
  console.log('\n‚ö° 4. TESTANDO PERFORMANCE B√ÅSICA...');
  
  const tests = [
    { name: 'Lista de planos', table: 'subscription_plans', limit: 10 },
    { name: 'Consulta de perfis', table: 'profiles', limit: 5 },
    { name: '√öltimas mensagens', table: 'messages', limit: 20 }
  ];
  
  for (const test of tests) {
    try {
      const startTime = Date.now();
      
      const { data, error } = await supabase
        .from(test.table)
        .select('*')
        .limit(test.limit);
      
      const duration = Date.now() - startTime;
      const isGoodPerformance = duration < 2000; // < 2 segundos
      
      validationResults.performance[test.name] = {
        success: !error,
        duration,
        isGoodPerformance
      };
      
      const status = !error && isGoodPerformance ? '‚úÖ' : '‚ö†Ô∏è';
      console.log(`  ${status} ${test.name}: ${duration}ms ${!error ? '(OK)' : '(ERRO)'}`);
      
    } catch (err) {
      validationResults.performance[test.name] = {
        success: false,
        error: err.message
      };
      console.log(`  ‚ùå ${test.name}: ${err.message}`);
    }
  }
}

/**
 * 5. VERIFICAR SEGURAN√áA RLS
 */
async function validateRLSSecurity() {
  console.log('\nüîí 5. VERIFICANDO SEGURAN√áA RLS...');
  
  const tablesWithRLS = [
    'profiles', 'subscriptions', 'whatsapp_instances', 
    'agents', 'messages', 'contacts', 'payments', 'usage_stats'
  ];
  
  // Teste b√°sico: tentar acessar sem autentica√ß√£o
  for (const table of tablesWithRLS) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('id')
        .limit(1);
      
      // Para algumas tabelas, √© esperado que funcione (ex: subscription_plans)
      // Para outras, deve ser bloqueado pelo RLS
      const hasData = data && data.length > 0;
      const hasError = !!error;
      
      validationResults.policies[table] = {
        accessible: hasData,
        blocked: hasError,
        status: hasError ? 'protected' : 'open'
      };
      
      const status = table === 'subscription_plans' ? 
        (hasData ? '‚úÖ' : '‚ö†Ô∏è') : 
        (hasError ? '‚úÖ' : '‚ö†Ô∏è');
      
      console.log(`  ${status} ${table}: ${hasError ? 'Protegido por RLS' : 'Acesso permitido'}`);
      
    } catch (err) {
      validationResults.policies[table] = {
        error: err.message,
        status: 'error'
      };
      console.log(`  ‚ùå ${table}: ${err.message}`);
    }
  }
}

/**
 * 6. RELAT√ìRIO FINAL
 */
function generateFinalReport() {
  console.log('\n' + '='.repeat(60));
  console.log('üìä RELAT√ìRIO FINAL DE VALIDA√á√ÉO');
  console.log('='.repeat(60));
  
  // Calcular scores
  const tableCount = Object.values(validationResults.tables).filter(Boolean).length;
  const totalTables = Object.keys(validationResults.tables).length;
  const tableScore = Math.round((tableCount / totalTables) * 100);
  
  const performanceTests = Object.values(validationResults.performance);
  const goodPerformanceCount = performanceTests.filter(test => 
    test.success && test.isGoodPerformance
  ).length;
  const performanceScore = performanceTests.length > 0 ? 
    Math.round((goodPerformanceCount / performanceTests.length) * 100) : 0;
  
  console.log(`\nüèóÔ∏è  ESTRUTURA DE TABELAS: ${tableScore}% (${tableCount}/${totalTables})`);
  console.log(`üí∞ PLANO GRATUITO: ${validationResults.freePlan ? '‚úÖ OK' : '‚ùå FALHOU'}`);
  console.log(`‚ö° PERFORMANCE: ${performanceScore}% (${goodPerformanceCount}/${performanceTests.length})`);
  console.log(`üîí SEGURAN√áA RLS: ${Object.keys(validationResults.policies).length} tabelas verificadas`);
  
  // Score geral
  const overallScore = Math.round((
    (tableScore * 0.4) + 
    (validationResults.freePlan ? 100 : 0) * 0.2 + 
    (performanceScore * 0.2) + 
    (Object.keys(validationResults.policies).length > 0 ? 100 : 0) * 0.2
  ));
  
  console.log(`\nüéØ SCORE GERAL: ${overallScore}%`);
  
  if (overallScore >= 90) {
    console.log('\nüéâ EXCELENTE! Todas as corre√ß√µes foram aplicadas com sucesso.');
    console.log('‚úÖ O sistema est√° funcionando perfeitamente.');
  } else if (overallScore >= 70) {
    console.log('\n‚úÖ BOM! A maioria das corre√ß√µes foi aplicada.');
    console.log('‚ö†Ô∏è Algumas melhorias podem ser necess√°rias.');
  } else {
    console.log('\n‚ö†Ô∏è ATEN√á√ÉO! Algumas corre√ß√µes cr√≠ticas podem n√£o ter sido aplicadas.');
    console.log('üîß Revise o script EXECUTE-ALL-FIXES.sql');
  }
  
  console.log('\nüìã PR√ìXIMOS PASSOS:');
  if (overallScore < 90) {
    console.log('1. üîç Revise os erros mostrados acima');
    console.log('2. üîß Execute novamente as corre√ß√µes necess√°rias');
    console.log('3. üß™ Teste a cria√ß√£o de novos usu√°rios');
  } else {
    console.log('1. üß™ Teste a cria√ß√£o de novos usu√°rios');
    console.log('2. üìä Configure monitoramento de performance');
    console.log('3. üöÄ Implemente funcionalidades adicionais');
  }
  
  console.log('\nüìû Suporte: suporte@conversaai.com.br');
}

/**
 * EXECU√á√ÉO PRINCIPAL
 */
async function main() {
  try {
    await validateTableStructure();
    await validateFreePlan();
    await validateDataIntegrity();
    await validatePerformance();
    await validateRLSSecurity();
    
    generateFinalReport();
    
  } catch (error) {
    console.error('\n‚ùå ERRO CR√çTICO na valida√ß√£o:', error.message);
    console.log('\nüö® Execute o script de corre√ß√µes novamente');
    console.log('üìñ Consulte: GUIA-EXECUCAO-CORRECOES.md');
    process.exit(1);
  }
}

// Executar valida√ß√£o
main().catch(err => {
  console.error('‚ùå Erro n√£o capturado:', err);
  process.exit(1);
});
