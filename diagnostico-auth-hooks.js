#!/usr/bin/env node

/**
 * Diagn√≥stico Auth Hooks - Sistema de Confirma√ß√£o de Email
 * 
 * Este script verifica se h√° Auth Hooks ou configura√ß√µes espec√≠ficas 
 * que podem estar interferindo no processo de confirma√ß√£o de email.
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configura√ß√µes
const SUPABASE_URL = process.env.VITE_SUPABASE_URL || 'https://hpovwcaskorzzrpphgkc.supabase.co';
const SUPABASE_ANON_KEY = process.env.VITE_SUPABASE_ANON_KEY;
const SUPABASE_SERVICE_KEY = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_ANON_KEY || !SUPABASE_SERVICE_KEY) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas');
  console.error('Configure VITE_SUPABASE_ANON_KEY e VITE_SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

// Cliente com service role para acesso admin
const supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

console.log('üîç === DIAGN√ìSTICO DE AUTH HOOKS E CONFIGURA√á√ïES ===\n');

async function verificarConfiguracaoAuth() {
  console.log('üìã 1. VERIFICANDO CONFIGURA√á√ïES DE AUTENTICA√á√ÉO');
  console.log('===============================================');

  try {
    console.log('‚ÑπÔ∏è  Configura√ß√µes obtidas via API admin ser√£o limitadas por seguran√ßa');
    console.log('   Para verifica√ß√£o completa, acesse o Dashboard do Supabase:\n');
    console.log('   üåê https://supabase.com/dashboard/project/hpovwcaskorzzrpphgkc/auth/hooks');
    console.log('   üåê https://supabase.com/dashboard/project/hpovwcaskorzzrpphgkc/auth/templates');
    console.log('   üåê https://supabase.com/dashboard/project/hpovwcaskorzzrpphgkc/auth/rate-limits\n');

  } catch (error) {
    console.log(`‚ùå Erro na verifica√ß√£o: ${error.message}\n`);
  }
}

async function testarProcessoConfirmacao() {
  console.log('üß™ 2. TESTANDO PROCESSO DE CONFIRMA√á√ÉO');
  console.log('====================================');

  const testEmail = `teste_${Date.now()}@exemplo.com`;
  const testPassword = 'TestPassword123!';

  try {
    console.log(`üìß Criando usu√°rio de teste: ${testEmail}`);
    
    // Criar usu√°rio
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: { name: 'Teste Diagn√≥stico' }
      }
    });

    if (signUpError) {
      console.log(`‚ùå Erro no signup: ${signUpError.message}`);
      return false;
    }

    console.log(`‚úÖ Usu√°rio criado: ${signUpData.user?.id}`);
    console.log(`üìä Estado inicial:`, {
      emailConfirmed: signUpData.user?.email_confirmed_at !== null,
      needsConfirmation: !signUpData.session,
      userId: signUpData.user?.id
    });

    // Se o usu√°rio foi criado mas n√£o h√° sess√£o, significa que precisa de confirma√ß√£o
    if (signUpData.user && !signUpData.session) {
      console.log('üîç Usu√°rio criado mas sem sess√£o ativa - confirma√ß√£o necess√°ria');
      
      // Tentar confirmar manualmente via Admin API
      console.log('üîß Tentando confirma√ß√£o manual via Admin API...');
      
      const { data: confirmData, error: confirmError } = await supabaseAdmin.auth.admin.updateUserById(
        signUpData.user.id,
        { email_confirm: true }
      );

      if (confirmError) {
        console.log(`‚ùå Erro na confirma√ß√£o manual: ${confirmError.message}`);
      } else {
        console.log(`‚úÖ Confirma√ß√£o manual bem-sucedida!`);
        console.log(`üìä Dados ap√≥s confirma√ß√£o:`, {
          emailConfirmed: confirmData.user?.email_confirmed_at !== null,
          confirmedAt: confirmData.user?.email_confirmed_at
        });
      }
    } else if (signUpData.session) {
      console.log('‚ö†Ô∏è  Usu√°rio criado COM sess√£o ativa - confirma√ß√£o autom√°tica est√° ATIVA');
      console.log('    Isso pode significar que auto-confirma√ß√£o est√° habilitada');
    }

    return true;

  } catch (error) {
    console.log(`‚ùå Erro no teste: ${error.message}`);
    return false;
  }
}

async function verificarFuncaoCustomEmail() {
  console.log('\nüì® 3. VERIFICANDO FUN√á√ÉO CUSTOM-EMAIL');
  console.log('===================================');

  try {
    // Testar se a fun√ß√£o custom-email est√° respondendo
    const testPayload = {
      email: 'teste@exemplo.com',
      type: 'signup',
      token: 'test-token-123',
      metadata: { name: 'Teste' }
    };

    console.log('üåê Testando fun√ß√£o custom-email...');
    const response = await fetch(`${SUPABASE_URL}/functions/v1/custom-email`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      },
      body: JSON.stringify(testPayload)
    });

    console.log(`üìä Status da fun√ß√£o: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const result = await response.json();
      console.log(`‚úÖ Fun√ß√£o respondeu corretamente:`, result);
    } else {
      const errorText = await response.text();
      console.log(`‚ùå Erro na fun√ß√£o: ${errorText}`);
    }

  } catch (error) {
    console.log(`‚ùå Erro ao testar fun√ß√£o: ${error.message}`);
  }
}

async function gerarRelatorioCompleto() {
  console.log('\nüìã 4. RELAT√ìRIO DE DIAGN√ìSTICO');
  console.log('============================');

  console.log('üîç PONTOS DE VERIFICA√á√ÉO MANUAL NECESS√ÅRIOS:');
  console.log('');
  console.log('1. ü™ù AUTH HOOKS:');
  console.log('   ‚Ä¢ Acesse: https://supabase.com/dashboard/project/hpovwcaskorzzrpphgkc/auth/hooks');
  console.log('   ‚Ä¢ Verifique se h√° hooks ativos que podem estar interferindo');
  console.log('   ‚Ä¢ Se houver hooks, desabilite temporariamente para teste');
  console.log('');
  
  console.log('2. üìß EMAIL TEMPLATES:');
  console.log('   ‚Ä¢ Acesse: https://supabase.com/dashboard/project/hpovwcaskorzzrpphgkc/auth/templates');
  console.log('   ‚Ä¢ Verifique se o webhook est√° configurado corretamente');
  console.log('   ‚Ä¢ URL esperada: https://hpovwcaskorzzrpphgkc.supabase.co/functions/v1/custom-email');
  console.log('');
  
  console.log('3. ‚öôÔ∏è  CONFIGURA√á√ïES GERAIS:');
  console.log('   ‚Ä¢ Acesse: https://supabase.com/dashboard/project/hpovwcaskorzzrpphgkc/auth/settings');
  console.log('   ‚Ä¢ Verifique "Confirm email" est√° habilitado');
  console.log('   ‚Ä¢ Verifique "Site URL" est√° correto: https://ia.geni.chat');
  console.log('   ‚Ä¢ Verifique "Redirect URLs" incluem: https://ia.geni.chat/confirmar-email');
  console.log('');
  
  console.log('4. üîê SEGURAN√áA:');
  console.log('   ‚Ä¢ Acesse: https://supabase.com/dashboard/project/hpovwcaskorzzrpphgkc/auth/rate-limits');
  console.log('   ‚Ä¢ Verifique se os limites de taxa n√£o est√£o muito restritivos');
  console.log('   ‚Ä¢ Token verifications deve ser >= 30 por hora');
  console.log('');

  console.log('üéØ PR√ìXIMOS PASSOS SUGERIDOS:');
  console.log('');
  console.log('1. Verificar e desabilitar Auth Hooks temporariamente');
  console.log('2. Aumentar limite de "Token verifications" para 150/hora');
  console.log('3. Testar confirma√ß√£o com hooks desabilitados');
  console.log('4. Se funcionar, o problema s√£o os hooks interferindo');
  console.log('5. Considerar implementar confirma√ß√£o manual se hooks s√£o necess√°rios');
}

// Executar diagn√≥stico
async function main() {
  try {
    await verificarConfiguracaoAuth();
    await testarProcessoConfirmacao();
    await verificarFuncaoCustomEmail();
    await gerarRelatorioCompleto();
    
    console.log('\n‚úÖ Diagn√≥stico conclu√≠do!');
    console.log('\nüîß Para corrigir o problema:');
    console.log('1. Acesse o Dashboard do Supabase');
    console.log('2. Verifique as se√ß√µes indicadas acima');
    console.log('3. Desabilite hooks temporariamente se existirem');
    console.log('4. Teste novamente o processo de confirma√ß√£o');
    
  } catch (error) {
    console.error('\n‚ùå Erro durante diagn√≥stico:', error.message);
  }
}

main();
