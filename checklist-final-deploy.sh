#!/bin/bash

# CHECKLIST FINAL DE DEPLOY - VERIFICA√á√ÉO VISUAL
# Execute este script para uma verifica√ß√£o r√°pida antes do deploy

echo "üéØ CHECKLIST FINAL DE DEPLOY - SaaSAgent"
echo "========================================"
echo ""

# Fun√ß√£o para verificar arquivo
check_file() {
    if [[ -f "$1" ]]; then
        echo "‚úÖ $1"
    else
        echo "‚ùå $1 - ARQUIVO AUSENTE!"
    fi
}

# Fun√ß√£o para verificar se arquivo N√ÉO existe (conflitos resolvidos)
check_no_file() {
    if [[ ! -f "$1" ]]; then
        echo "‚úÖ $1 - CONFLITO RESOLVIDO"
    else
        echo "‚ùå $1 - CONFLITO AINDA EXISTE!"
    fi
}

echo "üìÅ ARQUIVOS ESSENCIAIS:"
check_file "src/services/agentService.ts"
check_file "src/services/whatsappService.ts"
check_file "src/hooks/whatsapp/useInstanceManager.ts"
check_file "src/hooks/useWhatsAppConnection.ts"
check_file "api/evolution/instances.js"
echo ""

echo "üö´ CONFLITOS RESOLVIDOS:"
check_no_file "api/evolution/instances.ts"
check_no_file "api/test-env.ts"
check_no_file "api/debug/request-monitor.ts"
check_no_file "api/debug/instance-persistence-test.ts"
echo ""

echo "üõ†Ô∏è FERRAMENTAS DE VERIFICA√á√ÉO:"
check_file "check-deploy-conflicts.sh"
check_file "RESUMO_FINAL_CONSOLIDADO.md"
check_file "GUIA_DE_TESTE_FINAL.md"
echo ""

echo "üîç VERIFICA√á√ïES AUTOM√ÅTICAS:"

# Verificar imports problem√°ticos
if grep -r "next/server" api/ 2>/dev/null; then
    echo "‚ùå IMPORTS NEXT.JS ENCONTRADOS!"
else
    echo "‚úÖ Nenhum import Next.js encontrado"
fi

# Verificar conflitos de nomes
conflicts=$(find . -name "*.js" -o -name "*.ts" | sed 's/\.[^.]*$//' | sort | uniq -d)
if [[ -n "$conflicts" ]]; then
    echo "‚ùå CONFLITOS DE NOMES ENCONTRADOS:"
    echo "$conflicts"
else
    echo "‚úÖ Nenhum conflito de nomes encontrado"
fi

# Testar build (se npm est√° dispon√≠vel)
echo ""
echo "üèóÔ∏è TESTE DE BUILD:"
if command -v npm &> /dev/null; then
    if npm run build > /dev/null 2>&1; then
        echo "‚úÖ Build local bem-sucedida"
    else
        echo "‚ùå Build local falhou - verificar erros"
    fi
else
    echo "‚ö†Ô∏è  npm n√£o encontrado - build n√£o testada"
fi

echo ""
echo "üéØ RESUMO FINAL:"
echo "=================="

# Contar verifica√ß√µes
total_files=8
essential_files=0
for file in "src/services/agentService.ts" "src/services/whatsappService.ts" "src/hooks/whatsapp/useInstanceManager.ts" "src/hooks/useWhatsAppConnection.ts" "api/evolution/instances.js" "check-deploy-conflicts.sh" "RESUMO_FINAL_CONSOLIDADO.md" "GUIA_DE_TESTE_FINAL.md"; do
    if [[ -f "$file" ]]; then
        ((essential_files++))
    fi
done

conflict_files=0
for file in "api/evolution/instances.ts" "api/test-env.ts" "api/debug/request-monitor.ts" "api/debug/instance-persistence-test.ts"; do
    if [[ -f "$file" ]]; then
        ((conflict_files++))
    fi
done

echo "üìä Arquivos essenciais: $essential_files/$total_files"
echo "üö´ Conflitos resolvidos: $((4-conflict_files))/4"

if [[ $essential_files -eq $total_files ]] && [[ $conflict_files -eq 0 ]]; then
    echo ""
    echo "üéâ TUDO PRONTO PARA DEPLOY!"
    echo "‚úÖ Arquitetura simplificada: IMPLEMENTADA"
    echo "‚úÖ Webhook N8N: IMPLEMENTADO"
    echo "‚úÖ Conflitos de deploy: RESOLVIDOS"
    echo ""
    echo "üöÄ Execute: vercel --prod"
    exit 0
else
    echo ""
    echo "‚ö†Ô∏è  VERIFICAR PROBLEMAS ANTES DO DEPLOY"
    echo "Arquivos ausentes ou conflitos n√£o resolvidos"
    exit 1
fi
