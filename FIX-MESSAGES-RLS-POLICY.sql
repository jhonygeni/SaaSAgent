-- FIX MESSAGES RLS POLICY
-- Script para corrigir as pol√≠ticas RLS da tabela messages
-- Este script resolve o erro 403 Forbidden (c√≥digo 42501) ao inserir mensagens

-- =====================================================
-- CORRE√á√ÉO DAS POL√çTICAS RLS PARA A TABELA MESSAGES
-- =====================================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE 'üîí ===== CORRIGINDO POL√çTICAS RLS DA TABELA MESSAGES =====';
  RAISE NOTICE '';
END $$;

-- 1. HABILITAR RLS NA TABELA MESSAGES (se n√£o estiver habilitado)
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;

-- 2. REMOVER POL√çTICAS EXISTENTES PROBLEM√ÅTICAS
DROP POLICY IF EXISTS "Users can view messages from their instances" ON public.messages;
DROP POLICY IF EXISTS "Users can insert messages to their instances" ON public.messages; 
DROP POLICY IF EXISTS "Users can update messages from their instances" ON public.messages;
DROP POLICY IF EXISTS "Users can delete messages from their instances" ON public.messages;
DROP POLICY IF EXISTS "Users can access their own messages" ON public.messages;
DROP POLICY IF EXISTS "Users can insert their own messages" ON public.messages;
DROP POLICY IF EXISTS "Users can manage their own messages" ON public.messages;

-- 3. CRIAR POL√çTICA CORRETA PARA SELECT (baseada em user_id direto)
CREATE POLICY "Users can view their own messages" ON public.messages 
  FOR SELECT 
  USING (auth.uid() = user_id);

-- 4. CRIAR POL√çTICA CORRETA PARA INSERT (baseada em user_id direto)
CREATE POLICY "Users can insert their own messages" ON public.messages 
  FOR INSERT 
  WITH CHECK (auth.uid() = user_id);

-- 5. CRIAR POL√çTICA CORRETA PARA UPDATE (baseada em user_id direto)
CREATE POLICY "Users can update their own messages" ON public.messages 
  FOR UPDATE 
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- 6. CRIAR POL√çTICA CORRETA PARA DELETE (baseada em user_id direto)
CREATE POLICY "Users can delete their own messages" ON public.messages 
  FOR DELETE 
  USING (auth.uid() = user_id);

-- 7. POL√çTICA ALTERNATIVA BASEADA EM INSTANCE_ID (caso necess√°rio)
-- Esta pol√≠tica adicional permite acesso via inst√¢ncia caso o user_id n√£o esteja sendo preenchido corretamente
CREATE POLICY "Users can access messages via instance" ON public.messages 
  FOR ALL 
  USING (
    EXISTS (
      SELECT 1 FROM public.whatsapp_instances 
      WHERE id = messages.instance_id AND user_id = auth.uid()
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.whatsapp_instances 
      WHERE id = messages.instance_id AND user_id = auth.uid()
    )
  );

-- =====================================================
-- VERIFICA√á√ÉO E VALIDA√á√ÉO
-- =====================================================

-- Verificar se RLS est√° habilitado
DO $$
DECLARE
  rls_enabled BOOLEAN;
BEGIN
  SELECT pg_class.relrowsecurity INTO rls_enabled
  FROM pg_class 
  WHERE pg_class.relname = 'messages' AND pg_class.relnamespace = 'public'::regnamespace;
  
  IF rls_enabled THEN
    RAISE NOTICE '‚úÖ RLS habilitado na tabela messages';
  ELSE
    RAISE NOTICE '‚ùå RLS N√ÉO est√° habilitado na tabela messages';
  END IF;
END $$;

-- Listar pol√≠ticas criadas
SELECT 
  policyname,
  cmd,
  permissive,
  roles,
  qual,
  with_check
FROM pg_policies 
WHERE schemaname = 'public' AND tablename = 'messages'
ORDER BY policyname;

-- =====================================================
-- TESTE B√ÅSICO DAS POL√çTICAS
-- =====================================================

-- Fun√ß√£o para testar as pol√≠ticas RLS da tabela messages
CREATE OR REPLACE FUNCTION public.test_messages_rls()
RETURNS TEXT AS $$
DECLARE
  current_user_id UUID;
  test_result TEXT := '';
BEGIN
  -- Obter ID do usu√°rio atual
  current_user_id := auth.uid();
  
  IF current_user_id IS NULL THEN
    RETURN 'ERRO: Nenhum usu√°rio autenticado para teste';
  END IF;
  
  test_result := test_result || 'Testando pol√≠ticas RLS da tabela messages para usu√°rio: ' || current_user_id || E'\n';
  
  -- Testar acesso √†s pr√≥prias mensagens
  BEGIN
    PERFORM * FROM public.messages WHERE user_id = current_user_id LIMIT 1;
    test_result := test_result || '‚úÖ Acesso √†s pr√≥prias mensagens: OK' || E'\n';
  EXCEPTION WHEN OTHERS THEN
    test_result := test_result || '‚ùå Acesso √†s pr√≥prias mensagens: ERRO - ' || SQLERRM || E'\n';
  END;
  
  -- Testar acesso a mensagens de outros usu√°rios (deve falhar)
  BEGIN
    PERFORM * FROM public.messages WHERE user_id != current_user_id LIMIT 1;
    test_result := test_result || '‚ùå Isolamento de mensagens: FALHOU (conseguiu acessar mensagens de outros)' || E'\n';
  EXCEPTION WHEN OTHERS THEN
    test_result := test_result || '‚úÖ Isolamento de mensagens: OK (sem acesso a mensagens de outros)' || E'\n';
  END;
  
  RETURN test_result;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =====================================================
-- RELAT√ìRIO FINAL
-- =====================================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE '‚úÖ ===== POL√çTICAS RLS DA TABELA MESSAGES CORRIGIDAS =====';
  RAISE NOTICE '';
  RAISE NOTICE 'üîí POL√çTICAS CRIADAS:';
  RAISE NOTICE '‚Ä¢ Users can view their own messages - SELECT baseado em user_id';
  RAISE NOTICE '‚Ä¢ Users can insert their own messages - INSERT baseado em user_id';
  RAISE NOTICE '‚Ä¢ Users can update their own messages - UPDATE baseado em user_id';
  RAISE NOTICE '‚Ä¢ Users can delete their own messages - DELETE baseado em user_id';
  RAISE NOTICE '‚Ä¢ Users can access messages via instance - Pol√≠tica baseada em instance_id como fallback';
  RAISE NOTICE '';
  RAISE NOTICE 'üìã PR√ìXIMOS PASSOS:';
  RAISE NOTICE '1. Teste inserindo uma mensagem atrav√©s da aplica√ß√£o';
  RAISE NOTICE '2. Execute SELECT public.test_messages_rls() para teste automatizado';
  RAISE NOTICE '3. Verifique se o user_id est√° sendo preenchido corretamente na aplica√ß√£o';
  RAISE NOTICE '';
END $$;
