#!/usr/bin/env node

/**
 * Script simples para testar e verificar o problema RLS
 * e fornecer instru√ß√µes para corre√ß√£o manual
 */

import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = 'https://hpovwcaskorzzrpphgkc.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imhwb3Z3Y2Fza29yenpycHBoZ2tjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4MjYzODYsImV4cCI6MjA2MzQwMjM4Nn0.3Gx3Gc5xlFKwoMvd0Zk9vELzNbrf0ar4gaM92n9dtDc';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

console.log('üîç DIAGN√ìSTICO FINAL - Problema de Persist√™ncia WhatsApp Instances');
console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

async function diagnoseAndProvideInstructions() {
  try {
    // 1. Buscar usu√°rios existentes
    console.log('\n1. üë• Verificando usu√°rios existentes...');
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('id, email')
      .limit(3);
    
    if (profilesError) {
      console.log(`‚ùå Erro ao buscar perfis: ${profilesError.message}`);
      return;
    }
    
    console.log(`‚úÖ Encontrados ${profiles?.length || 0} usu√°rios`);
    if (profiles && profiles.length > 0) {
      profiles.forEach((profile, i) => {
        console.log(`   ${i + 1}. ${profile.email} (${profile.id})`);
      });
    }
    
    // 2. Verificar inst√¢ncias existentes
    console.log('\n2. üì± Verificando inst√¢ncias WhatsApp existentes...');
    const { data: instances, error: instancesError } = await supabase
      .from('whatsapp_instances')
      .select('id, name, user_id, status')
      .limit(5);
    
    if (instancesError) {
      console.log(`‚ùå Erro ao buscar inst√¢ncias: ${instancesError.message}`);
    } else {
      console.log(`‚úÖ Encontradas ${instances?.length || 0} inst√¢ncias`);
      if (instances && instances.length > 0) {
        instances.forEach((instance, i) => {
          console.log(`   ${i + 1}. ${instance.name} (${instance.status}) - User: ${instance.user_id}`);
        });
      }
    }
    
    // 3. Testar problema de inser√ß√£o
    console.log('\n3. üß™ Testando problema de inser√ß√£o...');
    
    if (profiles && profiles.length > 0) {
      const testUser = profiles[0];
      const testData = {
        user_id: testUser.id,
        name: `test_diagnostic_${Date.now()}`,
        status: 'testing',
        evolution_instance_id: 'test_diagnostic_id',
        session_data: { test: true, diagnostic: true }
      };
      
      const { data: insertResult, error: insertError } = await supabase
        .from('whatsapp_instances')
        .insert(testData)
        .select()
        .single();
      
      if (insertError) {
        console.log(`‚ùå PROBLEMA CONFIRMADO: ${insertError.message}`);
        console.log(`   C√≥digo de erro: ${insertError.code}`);
        
        if (insertError.code === '42501') {
          console.log('   üö® Este √© o erro RLS (Row Level Security) que impede as inst√¢ncias de serem salvas!');
        }
      } else {
        console.log('‚úÖ Inser√ß√£o funcionou! O problema pode ter sido resolvido.');
        console.log(`   ID da inst√¢ncia criada: ${insertResult.id}`);
        
        // Limpar teste
        await supabase.from('whatsapp_instances').delete().eq('id', insertResult.id);
        console.log('‚úÖ Teste limpo');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante diagn√≥stico:', error);
  }
}

async function provideInstructions() {
  console.log('\nüìã INSTRU√á√ïES PARA CORRE√á√ÉO NO SUPABASE DASHBOARD');
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
  
  console.log('\nüåê 1. Acesse o Supabase Dashboard:');
  console.log('   https://supabase.com/dashboard/projects');
  
  console.log('\n‚ö° 2. V√° para SQL Editor:');
  console.log('   ‚Ä¢ No painel esquerdo, clique em "SQL Editor"');
  console.log('   ‚Ä¢ Clique em "New Query"');
  
  console.log('\nüìù 3. Cole e execute o seguinte SQL:');
  console.log(`
-- CORRE√á√ÉO RLS PARA WHATSAPP_INSTANCES
-- Remove pol√≠tica existente que est√° muito restritiva
DROP POLICY IF EXISTS "Users can manage their own instances" ON public.whatsapp_instances;

-- Cria pol√≠ticas mais flex√≠veis
CREATE POLICY "Users can view their own instances" ON public.whatsapp_instances 
  FOR SELECT 
  USING (auth.uid() = user_id);

CREATE POLICY "System can create instances for users" ON public.whatsapp_instances 
  FOR INSERT 
  WITH CHECK (
    (auth.uid() IS NOT NULL AND auth.uid() = user_id)
    OR
    (user_id IS NOT NULL AND EXISTS (
      SELECT 1 FROM public.profiles WHERE id = user_id
    ))
  );

CREATE POLICY "Users can update their own instances" ON public.whatsapp_instances 
  FOR UPDATE 
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own instances" ON public.whatsapp_instances 
  FOR DELETE 
  USING (auth.uid() = user_id);
  `);
  
  console.log('\n‚ñ∂Ô∏è  4. Clique em "Run" para executar');
  
  console.log('\n‚úÖ 5. Teste a corre√ß√£o:');
  console.log('   ‚Ä¢ Execute: node simple-persistence-test.mjs');
  console.log('   ‚Ä¢ Ou teste criando uma inst√¢ncia na aplica√ß√£o');
  
  console.log('\nüîÑ 6. Se ainda n√£o funcionar, use a vers√£o mais permissiva:');
  console.log(`
-- VERS√ÉO MAIS PERMISSIVA (se a anterior n√£o funcionar)
DROP POLICY IF EXISTS "Users can view their own instances" ON public.whatsapp_instances;
DROP POLICY IF EXISTS "System can create instances for users" ON public.whatsapp_instances;
DROP POLICY IF EXISTS "Users can update their own instances" ON public.whatsapp_instances;
DROP POLICY IF EXISTS "Users can delete their own instances" ON public.whatsapp_instances;

CREATE POLICY "Temporary permissive policy" ON public.whatsapp_instances 
  FOR ALL 
  USING (
    (auth.uid() IS NOT NULL AND auth.uid() = user_id)
    OR
    (user_id IS NOT NULL AND EXISTS (
      SELECT 1 FROM public.profiles WHERE id = user_id
    ))
  )
  WITH CHECK (
    (auth.uid() IS NOT NULL AND auth.uid() = user_id)
    OR
    (user_id IS NOT NULL AND EXISTS (
      SELECT 1 FROM public.profiles WHERE id = user_id
    ))
  );
  `);
  
  console.log('\nüéØ EXPLICA√á√ÉO DO PROBLEMA:');
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
  console.log('‚Ä¢ O c√≥digo tenta salvar inst√¢ncias WhatsApp no Supabase');
  console.log('‚Ä¢ As pol√≠ticas RLS requerem auth.uid() = user_id');
  console.log('‚Ä¢ Durante a cria√ß√£o, pode n√£o haver contexto de usu√°rio autenticado');
  console.log('‚Ä¢ Resultado: erro 42501 (viola√ß√£o de pol√≠tica RLS)');
  console.log('‚Ä¢ Solu√ß√£o: pol√≠ticas mais flex√≠veis que permitem inser√ß√£o com user_id v√°lido');
  
  console.log('\nüìÅ ARQUIVOS CRIADOS PARA DEBUG:');
  console.log('‚Ä¢ fix-whatsapp-instances-rls.sql - SQL completo para corre√ß√£o');
  console.log('‚Ä¢ fix-rls-policies.mjs - Script JavaScript (alternativo)');
  console.log('‚Ä¢ simple-persistence-test.mjs - Teste de persist√™ncia');
  console.log('‚Ä¢ diagnose-rls.js - Diagn√≥stico detalhado');
}

// Executar diagn√≥stico e fornecer instru√ß√µes
diagnoseAndProvideInstructions()
  .then(() => provideInstructions())
  .then(() => {
    console.log('\nüöÄ PR√ìXIMOS PASSOS:');
    console.log('1. Execute o SQL no Supabase Dashboard');
    console.log('2. Teste com: node simple-persistence-test.mjs');
    console.log('3. Teste na aplica√ß√£o criando uma inst√¢ncia WhatsApp');
    console.log('4. Verifique se as inst√¢ncias aparecem no dashboard');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå Erro:', error);
    process.exit(1);
  });
