#!/usr/bin/env node

/**
 * TESTE CR√çTICO - VALIDA√á√ÉO DE CONEX√ÉO SUPABASE REAL
 * 
 * Este script verifica se o cliente Supabase est√° conectando ao banco correto
 * e se consegue salvar inst√¢ncias WhatsApp.
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// üîß Carregar vari√°veis de ambiente
const envPath = join(__dirname, '.env.local');
let envVars = {};

if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');
  envContent.split('\n').forEach(line => {
    const [key, ...valueParts] = line.split('=');
    if (key && valueParts.length) {
      envVars[key.trim()] = valueParts.join('=').trim().replace(/^["']|["']$/g, '');
    }
  });
}

const SUPABASE_URL = envVars.VITE_SUPABASE_URL || envVars.SUPABASE_URL;
const SUPABASE_ANON_KEY = envVars.VITE_SUPABASE_ANON_KEY || envVars.SUPABASE_ANON_KEY;

console.log('üîç TESTE CR√çTICO - CONEX√ÉO SUPABASE REAL');
console.log('=====================================\n');

// üö® Valida√ß√µes de seguran√ßa
console.log('1Ô∏è‚É£ VALIDANDO CREDENCIAIS...');
console.log(`URL: ${SUPABASE_URL}`);
console.log(`Key: ${SUPABASE_ANON_KEY ? `${SUPABASE_ANON_KEY.substring(0, 20)}...` : '‚ùå AUSENTE'}`);

if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error('‚ùå ERRO: Credenciais Supabase n√£o configuradas!');
  process.exit(1);
}

if (SUPABASE_URL.includes('demo.supabase.co')) {
  console.error('‚ùå ERRO: Detectada configura√ß√£o MOCK/DEMO!');
  console.error('   URL atual:', SUPABASE_URL);
  console.error('   Deveria ser: https://qxnbowuzpsagwvcucsyb.supabase.co');
  process.exit(1);
}

console.log('‚úÖ Credenciais v√°lidas - n√£o √© MOCK\n');

// üèóÔ∏è Criar cliente Supabase
console.log('2Ô∏è‚É£ CRIANDO CLIENTE SUPABASE...');
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
console.log('‚úÖ Cliente criado com sucesso\n');

// üîç Testar conex√£o
console.log('3Ô∏è‚É£ TESTANDO CONEX√ÉO...');
async function testConnection() {
  try {
    // Testar com query simples
    const { data, error, count } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true });
    
    if (error) {
      console.error('‚ùå Erro ao conectar:', error.message);
      return false;
    }
    
    console.log(`‚úÖ Conex√£o bem-sucedida! Total de usu√°rios: ${count}`);
    return true;
  } catch (err) {
    console.error('‚ùå Erro de conex√£o:', err.message);
    return false;
  }
}

// ü§ñ Testar salvamento de inst√¢ncia WhatsApp
async function testInstanceSave() {
  console.log('\n4Ô∏è‚É£ TESTANDO SALVAMENTO DE INST√ÇNCIA...');
  
  // Primeiro, verificar se existe um usu√°rio para o teste
  const { data: users, error: userError } = await supabase
    .from('users')
    .select('id')
    .limit(1);
  
  if (userError) {
    console.error('‚ùå Erro ao buscar usu√°rios:', userError.message);
    return false;
  }
  
  if (!users || users.length === 0) {
    console.log('‚ö†Ô∏è Nenhum usu√°rio encontrado para teste');
    return false;
  }
  
  const userId = users[0].id;
  console.log(`üë§ Usu√°rio para teste: ${userId}`);
  
  // Tentar inserir uma inst√¢ncia de teste
  const testInstance = {
    user_id: userId,
    name: `TESTE-${Date.now()}`,
    instance_key: `test_${Date.now()}`,
    webhook_url: 'https://test.webhook.com',
    status: 'disconnected',
    created_at: new Date().toISOString(),
    evolution_instance_id: `evo_${Date.now()}`
  };
  
  const { data, error } = await supabase
    .from('whatsapp_instances')
    .insert(testInstance)
    .select();
  
  if (error) {
    console.error('‚ùå Erro ao salvar inst√¢ncia:', error.message);
    console.error('Detalhes:', error.details);
    console.error('Hint:', error.hint);
    return false;
  }
  
  console.log('‚úÖ Inst√¢ncia salva com sucesso!');
  console.log('ID da inst√¢ncia:', data[0].id);
  
  // Limpar inst√¢ncia de teste
  await supabase
    .from('whatsapp_instances')
    .delete()
    .eq('id', data[0].id);
  
  console.log('üßπ Inst√¢ncia de teste removida');
  return true;
}

// üöÄ Executar testes
async function runTests() {
  try {
    const connectionOk = await testConnection();
    if (!connectionOk) {
      console.log('\n‚ùå TESTE FALHOU: Problema de conex√£o');
      process.exit(1);
    }
    
    const saveOk = await testInstanceSave();
    if (!saveOk) {
      console.log('\n‚ö†Ô∏è TESTE PARCIAL: Conex√£o OK, mas salvamento falhou');
      console.log('   Isso pode indicar problemas com pol√≠ticas RLS ou estrutura do banco');
      process.exit(1);
    }
    
    console.log('\nüéâ TODOS OS TESTES PASSARAM!');
    console.log('‚úÖ Cliente Supabase configurado corretamente');
    console.log('‚úÖ Conex√£o ao banco real funcionando');
    console.log('‚úÖ Salvamento de inst√¢ncias WhatsApp funcionando');
    console.log('\nüîß PR√ìXIMO PASSO: Testar no frontend real');
    
  } catch (err) {
    console.error('\n‚ùå ERRO INESPERADO:', err.message);
    process.exit(1);
  }
}

runTests();
