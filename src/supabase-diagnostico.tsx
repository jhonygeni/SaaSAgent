// Arquivo de diagn√≥stico para testar conex√£o com Supabase
import { supabase } from '@/integrations/supabase/client';
import React, { useState, useEffect } from 'react';

async function diagnosticoSupabase() {
  console.log("üîç Iniciando diagn√≥stico do Supabase... v4"); // Alterado para v4 e aspas duplas
  
  try {
    console.log("URL do Supabase:", import.meta.env.VITE_SUPABASE_URL);
    console.log("ANON_KEY definida:", !!import.meta.env.VITE_SUPABASE_ANON_KEY);
    
    // Teste de ping/health usando uma tabela existente
    console.log(">>> DIAGNOSTICO v4: Preparando para consultar supabase.from('profiles').select('id').limit(1)"); // Log espec√≠fico
    const { data: pingData, error: pingError } = await supabase
      .from('profiles') 
      .select('id')
      .limit(1)
      .maybeSingle();
    
    if (pingError) {
      console.error("‚ùå Erro de conex√£o (tentativa em 'profiles'):", pingError.message); 
      console.error("‚ùå Detalhes do erro (tentativa em 'profiles'):", pingError);
      // N√£o retorne false ainda, vamos tentar a pr√≥xima tabela para ver se o problema √© espec√≠fico da tabela
    } else {
      console.log("‚úÖ Comunica√ß√£o com Supabase (tabela 'profiles') estabelecida!");
    }
    
    // Teste de autentica√ß√£o an√¥nima
    console.log("Testando autentica√ß√£o an√¥nima...");
    const { data: authData, error: authError } = await supabase.auth.getSession();
    
    if (authError) {
      console.error('‚ùå Erro de autentica√ß√£o:', authError.message);
    } else {
      console.log('‚úÖ API de autentica√ß√£o funcionando!');
      console.log('   Sess√£o:', authData.session ? 'Existe' : 'N√£o existe');
    }
    
    // Teste de acesso a inst√¢ncias WhatsApp
    console.log("Testando acesso √† tabela de inst√¢ncias WhatsApp...");
    const { data: instancesData, error: instancesError } = await supabase
      .from('whatsapp_instances')
      .select('*')
      .limit(3);
    
    if (instancesError) {
      console.error("‚ùå Erro ao acessar tabela whatsapp_instances:", instancesError.message);
      // Se o pingError tamb√©m ocorreu, ent√£o √© uma falha geral
      if (pingError) return false; 
    } else {
      console.log("‚úÖ Acesso √† tabela whatsapp_instances OK!");
      console.log(`   ${instancesData?.length || 0} inst√¢ncias encontradas`); // Adicionado fallback para length
    }
    
    // Se chegou aqui e pingError n√£o existe, ou instancesError n√£o existe, consideramos sucesso parcial ou total
    if (!pingError || !instancesError) {
        return true;
    }
    return false; // Falha se ambos os erros ocorrerem

  } catch (error) {
    console.error('‚ùå Erro cr√≠tico no diagn√≥stico:', error);
    return false;
  }
}

export async function runDiagnostico() {
  const startTime = performance.now();
  const success = await diagnosticoSupabase();
  const endTime = performance.now();
  
  console.log(`üïí Diagn√≥stico conclu√≠do em ${(endTime - startTime).toFixed(2)}ms`);
  console.log(`üìä Resultado: ${success ? '‚úÖ SUCESSO' : '‚ùå FALHA'}`);
  
  return success;
}

export default function DiagnosticoSupabase() {
  const [success, setSuccess] = useState<boolean | null>(null);
  const [error, setError] = useState<any>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const executeDiagnostico = async () => {
      try {
        setLoading(true);
        const result = await runDiagnostico();
        setSuccess(result);
      } catch (e) {
        console.error("Erro ao executar diagn√≥stico no componente:", e);
        setError(e);
        setSuccess(false);
      } finally {
        setLoading(false);
      }
    };
    executeDiagnostico();
  }, []);

  if (loading) {
    return (
      <div style={{ padding: '20px', textAlign: 'center' }}>
        <h1>üîç Executando Diagn√≥stico de Conex√£o Supabase...</h1>
        <p>Aguarde...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div style={{ padding: '20px', border: '2px solid #f44336', borderRadius: '8px', margin: '20px auto', maxWidth: '800px' }}>
        <h1>‚ùå Erro no Diagn√≥stico</h1>
        <p>Ocorreu um erro ao tentar executar o diagn√≥stico:</p>
        <pre>{String(error)}</pre>
      </div>
    );
  }
  
  // success n√£o ser√° null aqui devido ao setLoading
  const isSuccess = success === true;

  return (
    <div style={{ 
      padding: '20px', 
      maxWidth: '800px',
      margin: '20px auto',
      border: `2px solid ${isSuccess ? '#4caf50' : '#f44336'}`,
      borderRadius: '8px'
    }}>
      <h1>Diagn√≥stico de Conex√£o Supabase</h1>
      <p>Status: {isSuccess ? '‚úÖ CONECTADO' : '‚ùå ERRO DE CONEX√ÉO'}</p>
      <p>Confira os detalhes no console do navegador (F12)</p>
      
      <div style={{marginTop: '20px'}}>
        <h2>Pr√≥ximos Passos:</h2>
        {isSuccess ? (
          <ul>
            <li>Verificar se o UserProvider est√° inicializando corretamente</li>
            <li>Verificar se as tabelas necess√°rias existem no Supabase</li>
            <li>Testar a conex√£o com o WhatsApp</li>
          </ul>
        ) : (
          <ul>
            <li>Verificar se as vari√°veis de ambiente est√£o corretas</li>
            <li>Verificar se o Supabase est√° online</li>
            <li>Verificar se o IP n√£o est√° bloqueado</li>
          </ul>
        )}
      </div>
      
      <div style={{marginTop: '20px', fontSize: '0.8em', color: '#666'}}>
        <p>URL: {import.meta.env.VITE_SUPABASE_URL}</p>
        <p>ANON_KEY: {import.meta.env.VITE_SUPABASE_ANON_KEY ? '[DEFINIDA]' : '[N√ÉO DEFINIDA]'}</p>
      </div>
    </div>
  );
}
