/**
 * Utilit√°rio de diagn√≥stico para rastreamento de fluxo de autentica√ß√£o
 * Ajuda a identificar problemas de loop infinito em autentica√ß√£o
 */

// Registro de eventos
const authEvents: {
  timestamp: number;
  event: string;
  details: Record<string, any>;
}[] = [];

// Mapa de sess√µes observadas
const seenSessions = new Map<string, number>();
const userLoads = new Map<string, number>();
const subscriptionChecks = new Map<string, number>();

// Limite para detec√ß√£o de loops
const LOOP_THRESHOLD = 10; // 10 ocorr√™ncias em um curto per√≠odo
const TIME_WINDOW = 60000; // 1 minuto

/**
 * Limpa eventos antigos que est√£o fora da janela de tempo
 */
function cleanOldEvents() {
  const now = Date.now();
  while (authEvents.length > 0 && now - authEvents[0].timestamp > TIME_WINDOW) {
    authEvents.shift();
  }
}

/**
 * Registra um evento de autentica√ß√£o
 * @param event Nome do evento
 * @param details Detalhes associados ao evento
 */
export function logAuthEvent(event: string, details: Record<string, any> = {}) {
  console.log(`üîê [Auth Event] ${event}`, details);
  
  // Limpar eventos antigos
  cleanOldEvents();
  
  // Registrar novo evento
  authEvents.push({
    timestamp: Date.now(),
    event,
    details
  });
  
  // Verificar sess√µes repetidas
  if (details.sessionId) {
    const count = (seenSessions.get(details.sessionId) || 0) + 1;
    seenSessions.set(details.sessionId, count);
    
    // Alerta se a mesma sess√£o for vista muitas vezes
    if (count >= LOOP_THRESHOLD) {
      console.warn(`‚ö†Ô∏è ALERTA DE LOOP: Sess√£o ${details.sessionId} vista ${count} vezes no √∫ltimo minuto!`);
    }
  }
  
  // Verificar carregamentos de usu√°rio repetidos
  if (event === 'user_loaded' && details.userId) {
    const count = (userLoads.get(details.userId) || 0) + 1;
    userLoads.set(details.userId, count);
    
    // Alerta se o mesmo usu√°rio for carregado muitas vezes
    if (count >= LOOP_THRESHOLD) {
      console.warn(`‚ö†Ô∏è ALERTA DE LOOP: Usu√°rio ${details.userId} carregado ${count} vezes no √∫ltimo minuto!`);
    }
  }
  
  // Verificar verifica√ß√µes de assinatura repetidas
  if (event === 'subscription_check' && details.userId) {
    const count = (subscriptionChecks.get(details.userId) || 0) + 1;
    subscriptionChecks.set(details.userId, count);
    
    // Alerta se a mesma assinatura for verificada muitas vezes
    if (count >= LOOP_THRESHOLD) {
      console.warn(`‚ö†Ô∏è ALERTA DE LOOP: Assinatura de ${details.userId} verificada ${count} vezes no √∫ltimo minuto!`);
    }
  }
  
  // Verificar padr√µes que indiquem loops
  detectLoopPatterns();
}

/**
 * Detecta padr√µes que indiquem loops no fluxo de autentica√ß√£o
 */
function detectLoopPatterns() {
  if (authEvents.length < 5) return;
  
  // Sequ√™ncia de eventos que indicam loop
  const lastEvents = authEvents.slice(-5).map(e => e.event);
  
  // Padr√£o: verificar sess√£o -> criar usu√°rio -> inicializar -> verificar sess√£o -> criar usu√°rio
  if (
    lastEvents.includes('check_session') &&
    lastEvents.includes('create_user') &&
    lastEvents.includes('provider_init') &&
    lastEvents.filter(e => e === 'check_session').length >= 2
  ) {
    console.error(`üö® LOOP DETECTADO: Padr√£o de eventos indica loop de autentica√ß√£o:`);
    console.error(lastEvents.join(' -> '));
    
    // M√©trica de tempo entre os eventos para determinar se √© um loop genu√≠no
    const timeSpan = authEvents[authEvents.length - 1].timestamp - authEvents[authEvents.length - 5].timestamp;
    if (timeSpan < 5000) { // Se tudo aconteceu em menos de 5 segundos
      console.error(`üö® ALERTA CR√çTICO: Loop de autentica√ß√£o muito r√°pido (${timeSpan}ms)!`);
    }
  }
}

/**
 * Obt√©m estat√≠sticas de diagn√≥stico para autentica√ß√£o
 */
export function getAuthDiagnostics() {
  // Limpar eventos antigos antes
  cleanOldEvents();
  
  // Calcular estat√≠sticas
  return {
    eventsInLastMinute: authEvents.length,
    sessionsObserved: seenSessions.size,
    possibleLoops: [...seenSessions.entries()].filter(([_, count]) => count >= LOOP_THRESHOLD).length,
    topSessionHits: [...seenSessions.entries()]
      .sort((a, b) => b[1] - a[1])
      .slice(0, 3)
      .map(([id, count]) => ({ id, count })),
    topUserLoads: [...userLoads.entries()]
      .sort((a, b) => b[1] - a[1])
      .slice(0, 3)
      .map(([id, count]) => ({ id, count })),
    recentEvents: authEvents.slice(-10).map(({ event, timestamp, details }) => ({
      event,
      time: new Date(timestamp).toISOString(),
      ...details
    }))
  };
}

/**
 * Limpa todas as estat√≠sticas de diagn√≥stico
 */
export function clearAuthDiagnostics() {
  authEvents.length = 0;
  seenSessions.clear();
  userLoads.clear();
  subscriptionChecks.clear();
  console.log('üßπ Estat√≠sticas de diagn√≥stico de autentica√ß√£o resetadas');
}
