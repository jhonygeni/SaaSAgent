#!/usr/bin/env node

/**
 * EMERGENCY FIX: Corrigir loop infinito no useWhatsAppStatus
 * Substituir o bloco inteiro do setInterval problem√°tico
 */

const fs = require('fs');

const TARGET_FILE = '/Users/jhonymonhol/Desktop/SaaSAgent/src/hooks/whatsapp/useWhatsAppStatus.ts';

console.log('üö® EMERGENCY FIX: Corrigindo loop infinito completo...');

try {
  let content = fs.readFileSync(TARGET_FILE, 'utf8');
  
  // Encontrar o in√≠cio do bloco problem√°tico
  const startPattern = 'const connectionDetectionInterval = setInterval(async () => {';
  const endPattern = '}, CONNECTION_POLL_INTERVAL);';
  
  const startIndex = content.indexOf(startPattern);
  const endIndex = content.indexOf(endPattern, startIndex) + endPattern.length;
  
  if (startIndex !== -1 && endIndex !== -1) {
    const beforeBlock = content.substring(0, startIndex);
    const afterBlock = content.substring(endIndex);
    
    // Substituir pelo c√≥digo fixo
    const fixedBlock = `// EMERGENCY FIX: Disable polling to prevent infinite loops
    const connectionDetectionInterval = setTimeout(() => {
      console.log('‚ö†Ô∏è EMERGENCY: Connection polling disabled to prevent infinite page reloads');
      console.log('üì± Please use "Verificar Conex√£o" button for manual connection check');
    }, 1000);`;
    
    const fixedContent = beforeBlock + fixedBlock + afterBlock;
    
    // Backup e escrever arquivo corrigido
    fs.writeFileSync(TARGET_FILE + '.emergency-backup', content);
    fs.writeFileSync(TARGET_FILE, fixedContent);
    
    console.log('‚úÖ CORRE√á√ÉO APLICADA COM SUCESSO!');
    console.log('  ‚Ä¢ Polling setInterval removido completamente');
    console.log('  ‚Ä¢ Loop infinito deve estar resolvido');
    console.log('  ‚Ä¢ Backup salvo como .emergency-backup');
    console.log('  ‚Ä¢ Dashboard deve parar de recarregar');
    
  } else {
    console.log('‚ö†Ô∏è Padr√£o do setInterval n√£o encontrado no arquivo');
  }
  
} catch (error) {
  console.error('‚ùå Erro ao aplicar corre√ß√£o:', error.message);
  process.exit(1);
}
